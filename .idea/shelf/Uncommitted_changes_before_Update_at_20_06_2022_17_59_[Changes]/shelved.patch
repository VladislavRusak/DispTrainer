Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\n\nfrom PyQt5.QtWidgets import QApplication\nfrom NewMainWindow import *\n\nimport sys\n\n\ndef RunApplication():\n    app = QApplication(sys.argv)\n    window = MainWindow()\n\n    window.show()\n    sys.exit(app.exec())\n\n\nif __name__ == '__main__':\n    RunApplication()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision ca3e486479ccfdd5436ee9c86867e17e4cdb6a14)
+++ b/main.py	(date 1655732878821)
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+
 from PyQt5.QtWidgets import QApplication
 from NewMainWindow import *
 
Index: NewMainWindow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport os\nimport PyQt5\nfrom PyQt5 import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtCore import *\nimport sqlite3\nimport matplotlib\nmatplotlib.use('Qt5Agg')\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport matplotlib.dates as md\nimport datetime as dt\n\n\nfrom ClassThread import ReportsThread, ReportThread\nfrom ContentManagement import *\n\n# globals\nMETEO = []\n\n\"\"\"     \n        ДЛЯ УДОБНОЙ НАВИГАЦИИ, КОД РАЗБИТ НА БЛОКИ ОБОЗНАЧЕНЫЕ КОММЕНАТРИЯМИ\n        \n        # ГЛАВНОЕ ОКНО ( НАСТРОЙКИ ГЛАВНОГО ОКНА ПРИРЛОЖЕНИЯ)\n        # КЛАССЫ НАВИГАЦИОННЫХ ОКОН ( ОКНА ВЫЗЫВАЕМЫЕ ИЗ ГЛАВНОГО ОКНА )\n        # КЛАССЫ ИСПОЛНЯЕМЫХ ОКОН ( ОКНА СОДЕРЖАЩИЕ ДАННЫЕ ВЫЗЫВАЕМЫЕ ИЗ БД )\n        # КЛАССЫ ВСПОМОГАЛТЕЛЬНЫХ ФУНКЦИЙ ОКОН ( ДОБАВИТЬ, УДАЛИТЬ, ИЗМЕНИТЬ ЗАПИСИ)\n\n\"\"\"\n\n\n#########################################################\n#                                                       #\n#                                                       #\n#                                                       #\n#                    ГЛАВНОЕ ОКНО                       #\n#                                                       #\n#                                                       #\n#                                                       #\n#########################################################\n\n\nclass MainWindow(QWidget):\n    mainWinSignal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Логистика\")\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('(не работает)РТК')\n        b2 = QPushButton('Инфраструктура')\n        b3 = QPushButton('Оборудование')\n        b4 = QPushButton('Рабочие')\n        b5 = QPushButton('Т/С')\n        b6 = QPushButton('Грузы')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n        self.layout.addWidget(b3)\n        self.layout.addWidget(b4)\n        self.layout.addWidget(b5)\n        self.layout.addWidget(b6)\n        # b1.released.connect(self.openTechnologyCard)\n        b2.released.connect(self.openInfrastructureWindow)\n        b3.released.connect(self.openEquipment)\n        b4.released.connect(self.openWorkers)\n        b5.released.connect(self.openVehicle)\n        b6.released.connect(self.openCargo)\n\n    def resizeEvent(self, event):\n        QWidget.resizeEvent(self, event)\n\n    # def openTechnologyCard(self):\n    #     self.techF = TechnologyCardForm()\n    #     self.techF.show()\n\n    def openInfrastructureWindow(self):\n        self.structF = InfrastructureWindow()\n        self.structF.show()\n\n    def openEquipment(self):\n        self.equipF = EquipmentWindow()\n        self.equipF.show()\n\n    def openWorkers(self):\n        self.workF = WorkersWindow()\n        self.workF.show()\n\n    def openVehicle(self):\n        self.vehicleF = VehicleWindow()\n        self.vehicleF.show()\n\n    def openCargo(self):\n        self.cargoF = CargoWindow()\n        self.cargoF.show()\n\n\n#########################################################\n#                                                       #\n#                                                       #\n#                                                       #\n#               КЛАССЫ НАВИГАЦИОННЫХ ОКОН               #\n#                                                       #\n#                                                       #\n#                                                       #\n#########################################################\n\n\n# ртк класс\n\n\nclass InfrastructureWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Инфраструктура')\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('Причалы')\n        b2 = QPushButton('Склады')\n        b3 = QPushButton('---Ж/Д пути---')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n        self.layout.addWidget(b3)\n        b1.released.connect(self.openDocCharManagementForm)\n        b2.released.connect(self.openStorageCapManagmentForm)\n        # b3.released.connect(self.DocCharManagementForm)\n\n    def openDocCharManagementForm(self):\n        self.docF = DocCharManagementForm()\n        self.docF.show()\n\n    def openStorageCapManagmentForm(self):\n        self.storageF = StorageCapManagementForm()\n        self.storageF.show()\n\n\nclass EquipmentWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Оборудование\")\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('Краны')\n        b2 = QPushButton('Вспом.Техника')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n        b1.released.connect(self.openCransForm)\n        # b2.released.connect(self.openOtherEquipForm)\n\n    def openCransForm(self):\n        self.cransF = CranManagementForm()\n        self.cransF.show()\n\n    # def openOtherEquipForm(self):\n    #     self.equipF = OtherEquipmqntForm()\n    #     self.equipF.show()\n\n\n\n\n\nclass WorkersWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Работники')\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('Квалификации')\n        b2 = QPushButton('Работники')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n    #     b1.released.connect(self.openQualificationsForm)\n    #     b2.released.connect(self.openWorkersForm)\n\n    # def openQualificationsForm(self):\n    #     # self.qualificationF = QualificationsForm()\n    #     # self.qualificationF.show()\n\n    # def openWorkersForm(self):\n    #     # self.workersF = WorkersForm()\n    #     # self.workersF.show()\n\n\nclass VehicleWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Транспорт')\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('Суда')\n        b2 = QPushButton('ЖД составы')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n        # b1.released.connect(openShipsForm)\n        # b2.released.connect(openTrainsForm)\n\n    # def openShipsForm(self):\n    #     self.shipsF = ShipsForm()\n    #     self.shipsF.show()\n\n    # def openTrainsForm(self):\n    #     self.trainsF = TrainsForm()\n    #     self.trainsF.show()\n\nclass CargoWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('РТК')\n        self.setMainUi()\n        self.setGeometry(300, 300, 200, 300)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        b1 = QPushButton('Грузовая партия')\n        b2 = QPushButton('Типы грузов')\n        b3 = QPushButton('Способы хранения')\n        self.layout.addWidget(b1)\n        self.layout.addWidget(b2)\n        self.layout.addWidget(b3)\n        # b1.released.connect()\n        # b2.released.connect()\n        # b3.released.connect()\n\n\n#########################################################\n#                                                       #\n#                                                       #\n#                                                       #\n#               КЛАССЫ ИСПОЛНЯЕМЫХ ОКОН                 #\n#                                                       #\n#                                                       #\n#                                                       #\n#########################################################\n\n\nclass DocCharManagementForm(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Характеристики причалов\")\n        self.setMainUi()\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        self.table = QTableWidget()\n        self.table.setRowCount(1)\n        self.table.setColumnCount(6)\n        doc_char = DocChar()\n        # t.save()\n        thead = [\"Номер причала\", \"Длина\", \"Глубина\", \"Статус\"]\n        col_num = 0\n        for val in thead:\n            self.table.setItem(0, col_num, QTableWidgetItem(str(val)))\n            col_num += 1\n        self.data = doc_char.getAll()\n        row_num = 0\n        for i in self.data:\n            row_num += 1\n            self.table.setRowCount((row_num + 1))\n            col_num = 0\n            iter = 0\n            for j in i:\n                if iter == 0:\n                    iter += 1\n                    continue\n\n                if iter == 4:\n                    if j == \"\" or j == \"null\" or j == \"0\" or j == None:\n                        self.table.setItem(row_num, col_num, QTableWidgetItem(\"Свободен\"))\n                    else:\n                        self.table.setItem(row_num, col_num, QTableWidgetItem(\"Занят\"))\n                else:\n                    self.table.setItem(row_num, col_num, QTableWidgetItem(str(j)))\n                col_num += 1\n\n                iter += 1\n\n            w = QWidget()\n            s = str(i[0])\n            p = SaveRowButton('Сохранить', w, s, str(row_num), 0)\n            p.s.connect(self.saveRow)\n            self.table.setCellWidget(row_num, col_num, w)\n            col_num += 1\n            w = QWidget()\n            s = str(i[0])\n            p = MyButton('Удалить', w, s)\n            p.s.connect(self.delDoc)\n            self.table.setCellWidget(row_num, col_num, w)\n\n        self.layout.addWidget(self.table)\n        w = QWidget()\n        l = QGridLayout()\n        w.setLayout(l)\n        self.layout.addWidget(w)\n        add_b = QPushButton('Добавить значение')\n        self.num = QLineEdit()\n        self.length = QLineEdit()\n        self.depth = QLineEdit()\n        l.addWidget(self.num, 1, 0)\n        l.addWidget(self.length, 1, 1)\n        l.addWidget(self.depth, 1, 2)\n        l.addWidget(QLabel('Номер причала'), 0, 0)\n        l.addWidget(QLabel('Длина'), 0, 1)\n        l.addWidget(QLabel('Глубина'), 0, 2)\n        l.addWidget(add_b, 1, 3)\n        add_b.released.connect(self.addDocChar)\n\n    def saveRow(self, id, row, param):\n        row = int(row)\n        doc_char = DocChar()\n        doc_row = doc_char.find(id)\n        if doc_row != []:\n            Doc = DocChar(str(doc_row[0][0]), self.table.item(row, 0).text(), self.table.item(row, 1).text(),\n                          self.table.item(row, 2).text(), '')\n            Doc.save()\n        else:\n            self.sup = SupportWindow(\"Не удалось выбрать\", 0)\n            self.sup.show()\n\n    def addDocChar(self):\n        error = False\n        error_text = \"\"\n        num = self.num.text()\n        length = self.length.text()\n        depth = self.depth.text()\n        try:\n            num = int(num)\n        except Exception:\n            error = True\n            error_text = error_text + \"Поле Номер причала должно быть числовым\\n\"\n\n        try:\n            length = int(length)\n        except Exception:\n            error = True\n            error_text = error_text + \"Поле Длина должно быть числовым\\n\"\n\n        try:\n            depth = float(depth)\n        except Exception:\n            error = True\n            error_text = error_text + \"Поле Глубина должно быть числовым\\n\"\n\n        if not error:\n            doc_char = DocChar(None, str(num), str(length), str(depth), '')\n            doc_char.save()\n            qw = QWidget()\n            qw.setLayout(self.layout)\n            self.setMainUi()\n        else:\n            QMessageBox.about(self, 'Ошибка!', error_text)\n\n    def delDoc(self, val):\n        self.sup = SupportWindow('Удалить причал?', 1)\n        self.sup.show()\n        self.delete_id = val\n        self.sup.signal.connect(self.mk)\n\n    def mk(self, val):\n        if val == 1:\n            doc_char = DocChar()\n            doc_char.delete(self.delete_id)\n            qw = QWidget()\n            qw.setLayout(self.layout)\n            self.setMainUi()\n\n\nclass StorageCapManagementForm(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Управление складами')\n        self.setMainUi()\n        self.resize(500, 500)\n        self.changed = False\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        self.table = QTableWidget()\n        self.table.setRowCount(1)\n        self.table.setColumnCount(5)\n        storages = Storage()\n        cargos = Cargo()\n        types = []\n        col_num = 1\n        for c in cargos.getAll():\n            types.append(c[0])\n            self.table.setItem(0, col_num, QTableWidgetItem(\"Вместимость (\" + str(c[1]) + \")\"))\n            col_num += 1\n\n        row_num = 1\n        for r in storages.getAll():\n            self.table.setRowCount(row_num + 1)\n            self.table.setItem(row_num, 0, QTableWidgetItem(str(r[1])))\n            sdv = StorageDefVal()\n            capW = sdv.findBy({'storage': str(r[0])})\n            if capW != []:\n                for capW_r in capW:\n                    self.table.setItem(row_num, (int(types.index(capW_r[2])) + 1), QTableWidgetItem(str(capW_r[4])))\n                    sdf_id = str(capW_r[0])\n            else:\n                sdf_id = \"new\"\n            w = QWidget()\n            p = SaveRowButton('Сохранить', w, sdf_id, str(r[0]), row_num)\n            p.s.connect(self.saveStorageCap)\n            self.table.setCellWidget(row_num, col_num, w)\n            row_num += 1\n\n        self.types = types\n        self.layout.addWidget(self.table)\n        self.table.itemChanged.connect(self.valueChanged)\n\n        w = QWidget()\n        l = QHBoxLayout()\n        w.setLayout(l)\n        self.layout.addWidget(w)\n        add_b = QPushButton('Добавить склад')\n        l.addWidget(add_b)\n        add_b.released.connect(self.openStorageAddWindow)\n\n        return False\n\n    def saveStorageCap(self, id, storage_id, row):\n        for x in range(1, 4):\n            if self.table.item(row, x) != None:\n                sdv = StorageDefVal()\n                sdv_row = sdv.findBy({'storage': str(storage_id), 'cargo': str(self.types[(x - 1)])})\n                if sdv_row != []:\n                    StorageDef = StorageDefVal(str(sdv_row[0][0]), str(sdv_row[0][1]), str(sdv_row[0][2]),\n                                               str(sdv_row[0][3]), self.table.item(row, x).text())\n                    StorageDef.save()\n                else:\n                    StorageDef = StorageDefVal(None, str(storage_id), str(self.types[(x - 1)]), '0',\n                                               self.table.item(row, x).text())\n                    StorageDef.save()\n\n        self.changed = False\n\n    def valueChanged(self, item):\n        self.changed = True\n\n    def clos(self):\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def openStorageAddWindow(self):\n        self.storage = StorageManagementForm()\n        self.storage.show()\n        self.storage.signal.connect(self.clos)\n\n    def addStorageCap(self):\n        storage_cap = StorageCap(0, str(self.storage.itemData(self.storage.currentIndex())), self.coal.text(),\n                                 self.pellet.text(), self.iron.text())\n        storage_cap.save()\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def mk(self, val):\n        storage_cap = StorageCap()\n        storage_cap.delete(val)\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def cls(self, val):\n        if val == 1:\n            self.changed = False\n            self.close()\n\n    def closeEvent(self, evt):\n        if self.changed:\n            self.sup = SupportWindow(\"Действительно хотите закрыть?\", 1)\n            self.sup.show()\n            self.sup.signal.connect(self.cls)\n            evt.ignore()\n        else:\n            QWidget.closeEvent(self, evt)\n\n\nclass StorageManagementForm(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Склады\")\n        self.resize(400, 400)\n        self.setMainUi()\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        self.table = QTableWidget()\n        self.table.setRowCount(1)\n        self.table.setColumnCount(3)\n        storage = Storage()\n        # t.save()\n        self.data = storage.getAll()\n        row_num = -1\n        for i in self.data:\n            row_num += 1\n            self.table.setRowCount((row_num + 1))\n            col_num = 0\n            for j in i:\n                self.table.setItem(row_num, col_num, QTableWidgetItem(str(j)))\n                col_num += 1\n            w = QWidget()\n            s = str(i[0])\n            p = MyButton('Удалить', w, s)\n            p.s.connect(self.mk)\n            # p.s.connect(self.mk)\n            # p.released.connect()\n            self.table.setCellWidget(row_num, col_num, w)\n\n        self.layout.addWidget(self.table)\n        w = QWidget()\n        l = QHBoxLayout()\n        w.setLayout(l)\n        self.layout.addWidget(w)\n        add_b = QPushButton('Добавить значение')\n        self.type = QLineEdit()\n        l.addWidget(self.type)\n        l.addWidget(add_b)\n        add_b.released.connect(self.addStorage)\n\n    def addStorage(self):\n        if self.type.text() == '':\n            self.sup = SupportWindow(\"Заполните название\", 0)\n            self.sup.show()\n            return False\n        storage = Storage(0, self.type.text())\n        storage.save()\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def mk(self, val):\n        storage = Storage()\n        storage.delete(val)\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def closeEvent(self, evt):\n        QWidget.closeEvent(self, evt)\n        self.signal.emit(\"1\")\n\n\nclass CargoTypeForm(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Типы груза')\n        self.resize(400, 400)\n        self.setMainUi()\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        self.table = QTableWidget()\n        self.table.setRowCount(1)\n        self.table.setColumnCount(3)\n        cargo = Cargo()\n        self.data = cargo.getAll()\n        row_num = -1\n        for i in self.data:\n            row_num += 1\n            self.table.setRowCount((row_num + 1))\n            col_num = 0\n            for j in i:\n                self.table.setItem(row_num, col_num, QTableWidgetItem(str(j)))\n                col_num += 1\n            w = QWidget\n            s = str(i[0])\n            p = MyButton('Удалить', w, s)\n            p.s.connect(self.mk)\n            self.table.setCellWidget(row_num, col_num, w)\n\n        self.layout.addWidget(self.table)\n        w = QWidget()\n        l = QHBoxLayout()\n        w.layout(l)\n        self.layout.addWidget(w)\n        add_b = QPushButton('Добавить значение')\n        self.type = QLineEdit()\n        l.addWidget(self.type)\n        l.addWidget(add_b)\n        add_b.released.connect(self.addCargo)\n\n    def addCargo(self):\n        if self.type.text() == '':\n            self.sup = SupportWindow('Заполните название', 0)\n            self.sup.show()\n            return False\n        cargo = Cargo(0, self.type.text())\n        cargo.save()\n        qw = QWidget\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def mk(self, value):\n        cargo = Cargo()\n        cargo.delete(value)\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n\nclass CranManagementForm(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(\"Управление кранами\")\n        self.resize(600, 400)\n        self.setMainUi()\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        self.table = QTableWidget()\n        row_w = QWidget()\n        self.table.setRowCount(1)\n        self.table.setColumnCount(5)\n        thead = [\"Номер крана\", \"Тип\", \"Обслуживаемые объекты\", \"  Удаление   \", \"Добавление объектов\"]\n        row_w_l = QBoxLayout(QBoxLayout.LeftToRight)\n        row_w.setLayout(row_w_l)\n        col_num = 0\n        for val in thead:\n            row_w_l.addWidget(QLabel(val))\n            self.table.setItem(0, col_num, QTableWidgetItem(str(val)))\n            col_num += 1\n\n        # self.layout.addWidget(row_w)\n        row_num = 0\n        crans = Cran()\n        for i in crans.getAllGroupBy():\n            row_w = QWidget()\n            row_w_l = QBoxLayout(QBoxLayout.LeftToRight)\n            row_w.setLayout(row_w_l)\n            row_num += 1\n            self.table.setRowCount((row_num + 1))\n            self.table.setItem(row_num, 0, QTableWidgetItem(str(i[1])))\n            row_w_l.addWidget(QLabel(str(i[1])))\n            cran_type = CranType()\n            ct = cran_type.find(i[2])\n            row_w_l.addWidget(QLabel(str(ct[0][1])))\n            self.table.setItem(row_num, 1, QTableWidgetItem(str(ct[0][1])))\n            col_num = 0\n            # for j in i:\n            # self.table.setItem(row_num, col_num, QTableWidgetItem(str(j)))\n            # col_num += 1\n\n            cr = crans.findBy('num', '=', str(i[1]))\n            cor_3_wgt = QWidget()\n            cor_l = QFormLayout()\n            cor_3_wgt.setLayout(cor_l)\n            for row in cr:\n                if row[3] != '':\n                    name = \"\"\n                    if int(row[3]) == 1:\n                        s = Storage()\n                        tmp = s.find(str(row[4]))\n                        name = tmp[0][1]\n                    if int(row[3]) == 2:\n                        name = \"Причал №\" + str(row[4])\n                    if int(row[3]) == 3:\n                        name = \"Путь №\" + str(i[4])\n                    name = str(name)\n                    s = str(row[0])\n                    p = MyButton('Удалить', None, s)\n                    p.s.connect(self.delObjectConfirm)\n                    cor_l.addRow(QLabel(name), p)\n\n            # row_w_l.addWidget(cor_3_wgt)\n            cor_3_wgt.resize(100, 100)\n            self.table.setCellWidget(row_num, 2, cor_3_wgt)\n\n            w = QWidget()\n            s = str(i[1])\n            p = MyButton('Удалить', w, s)\n            p.s.connect(self.delConfirm)\n            w.resize(120, 30)\n            self.table.setCellWidget(row_num, 3, w)\n            w = QWidget()\n            s = str(i[1])\n            p = MyButton('Добавить объект', w, s)\n            p.s.connect(self.addObjectToCran)\n            w.resize(130, 30)\n            self.table.setCellWidget(row_num, 4, w)\n            # row_w_l.addWidget(cor_3_wgt)\n            # self.layout.addWidget(row_w)\n            # w = QWidget()\n            # s = str(i[0])\n            # p = SaveRowButton('Сохранить', w, s, str(row_num), (col_num - 2))\n            # p.s.connect(self.save_W)\n            # self.table.setCellWidget(row_num, col_num, w)\n\n        self.table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)\n        self.table.verticalHeader().setDefaultSectionSize(40)\n        self.table.horizontalHeader().setDefaultSectionSize(130)\n        self.layout.addWidget(self.table)\n\n        w = QWidget()\n        l = QHBoxLayout()\n        w.setLayout(l)\n        self.layout.addWidget(w)\n        add_b = QPushButton('Добавить кран')\n        l.addWidget(add_b)\n        add_b.released.connect(self.addCranFormFunc)\n\n        return False\n\n    def addObjectToCran(self, val):\n        self.cran_num = val\n        w = QWidget()\n        w.setWindowTitle(\"Добавить объект\")\n        w.l = QGridLayout()\n        w.setLayout(w.l)\n        w.type = QComboBox()\n        w.type.addItem(\"Склад\", 1)\n        w.type.addItem(\"Причал\", 2)\n        w.type.addItem(\"Путь\", 3)\n        w.type.currentIndexChanged.connect(self.getObjectsByType)\n\n        w.l.addWidget(QLabel(\"Тип объекта\"), 0, 0)\n        w.l.addWidget(w.type, 0, 1)\n\n        self.addObjectToCranForm = w\n        self.addObjectToCranForm.show()\n\n        objects = QComboBox()\n\n        self.addObjectToCranForm.objects = objects\n        self.addObjectToCranForm.l.addWidget(QLabel(\"Объект\"), 1, 0)\n        self.addObjectToCranForm.l.addWidget(objects, 1, 1)\n        self.addObjectToCranForm.add_b = QPushButton(\"Добавить\")\n        self.addObjectToCranForm.add_b.released.connect(self.addObjectToCranDo)\n        self.addObjectToCranForm.l.addWidget(self.addObjectToCranForm.add_b)\n\n        self.getObjectsByType(1)\n\n    def addObjectToCranDo(self):\n        if not hasattr(self.addObjectToCranForm, 'objects'):\n            QMessageBox.about(self, 'Ошибка!', \"Добавьте объект\")\n            return False\n\n        cr = Cran()\n        c = cr.findBy('num', '=', str(self.cran_num))\n        cran = Cran(None, str(self.cran_num), str(c[0][2]), str(self.addObjectToCranForm.type.currentData()),\n                    str(self.addObjectToCranForm.objects.currentData()))\n        cran.save()\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n        self.addObjectToCranForm.close()\n\n    def getObjectsByType(self, type=None):\n        type = self.addObjectToCranForm.type.currentData()\n        obs = []\n        if type == 1:\n            s = Storage()\n            obs = s.getAll()\n        if type == 2:\n            d = DocChar()\n            tmp = d.getAll()\n            for i in tmp:\n                obs.append((i[1], \"Причал №\" + str(i[1])))\n        if type == 3:\n            r = Railway()\n            tmp = r.getAll()\n            for i in tmp:\n                obs.append((i[0], \"Путь №\" + str(i[1])))\n\n        self.addObjectToCranForm.objects.clear()\n        for ob in obs:\n            self.addObjectToCranForm.objects.addItem(str(ob[1]), ob[0])\n\n    def addCranFormFunc(self):\n        w = QWidget()\n        w.setWindowTitle(\"Добавление крана\")\n        w.resize(400, 400)\n        w.l = QFormLayout()\n        w.setLayout(w.l)\n        w.num = QLineEdit()\n        w.l.addRow(QLabel('Номер крана'), w.num)\n        w.type = QComboBox()\n        cranType = CranType()\n        c = cranType.getAll()\n        for i in c:\n            w.type.addItem(i[1], i[0])\n\n        w.l.addRow(QLabel('Тип крана'), w.type)\n        btn = QPushButton('Добавить!')\n        btn.released.connect(self.doAddCran)\n        w.l.addWidget(btn)\n        btn = QPushButton('Добавить тип крана')\n        btn.released.connect(self.openAddCranTypeForm)\n        w.l.addWidget(btn)\n        w.l.addWidget(QLabel('Типы кранов'))\n        cran_type = CranType()\n        ct = cran_type.getAll()\n        for i in ct:\n            buttons_w = QWidget()\n            lay = QBoxLayout(QBoxLayout.LeftToRight)\n            buttons_w.setLayout(lay)\n\n            s = str(i[0])\n            p = MyButton('Просмотр', None, s)\n            p.s.connect(self.editCranType)\n            lay.addWidget(p)\n            p = MyButton('Удалить', None, s)\n            p.s.connect(self.delCranTypeConfirm)\n            lay.addWidget(p)\n            w.l.addRow(QLabel(i[1]), buttons_w)\n        self.addCranForm = w\n        self.addCranForm.show()\n\n    def editCranType(self, val):\n        cr = CranType()\n        c = cr.find(val)\n        self.edit_cran_id = val\n        w = QWidget()\n        w.setWindowTitle(\"Добавление типа крана\")\n        w.resize(600, 350)\n        w.l = QFormLayout()\n        w.setLayout(w.l)\n        w.val1 = QLineEdit()\n        w.val1.setText(str(c[0][1]))\n        w.l.addRow(QLabel('Название'), w.val1)\n        w.val2 = QLineEdit()\n        w.val2.setText(str(c[0][2]))\n        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (уголь)'), w.val2)\n        w.val3 = QLineEdit()\n        w.val3.setText(str(c[0][3]))\n        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (Чугун, брикеты)'), w.val3)\n        w.val4 = QLineEdit()\n        w.val4.setText(str(c[0][4]))\n        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (уголь)'), w.val4)\n        w.val5 = QLineEdit()\n        w.val5.setText(str(c[0][5]))\n        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (Чугун, брикеты)'), w.val5)\n        w.val6 = QLineEdit()\n        w.val6.setText(str(c[0][6]))\n        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (уголь)'), w.val6)\n        w.val7 = QLineEdit()\n        w.val7.setText(str(c[0][7]))\n        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (Чугун, брикеты)'),\n                   w.val7)\n        btn = QPushButton('Сохранить')\n        btn.released.connect(self.editCranTypeDo)\n        w.l.addWidget(btn)\n        self.editCranTypeForm = w\n        self.editCranTypeForm.show()\n\n    def editCranTypeDo(self):\n        cran = CranType(self.edit_cran_id, self.editCranTypeForm.val1.text(), self.editCranTypeForm.val2.text(),\n                        self.editCranTypeForm.val3.text(), self.editCranTypeForm.val4.text(),\n                        self.editCranTypeForm.val5.text(), self.editCranTypeForm.val6.text(),\n                        self.editCranTypeForm.val7.text())\n        cran.save()\n        self.editCranTypeForm.close()\n\n    def delCranTypeConfirm(self, val):\n        self.delete_id = val\n        self.sup = SupportWindow(\"Действительно хотите удалить?\", 1)\n        self.sup.show()\n        self.sup.signal.connect(self.delCranType)\n\n    def delCranType(self):\n        cran_type = CranType()\n        cran_type.delete(self.delete_id)\n        self.addCranForm.close()\n        self.addCranFormFunc()\n\n    def doAddCran(self):\n        crans = Cran(None, self.addCranForm.num.text(), str(self.addCranForm.type.currentData()), \"\", \"\")\n        crans.save()\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n        self.addCranForm.close()\n\n    def delObjectConfirm(self, val):\n        self.delete_id = val\n        self.sup = SupportWindow(\"Действительно хотите удалить?\", 1)\n        self.sup.show()\n        self.sup.signal.connect(self.deleteObject)\n\n    def deleteObject(self, val):\n        cran = Cran()\n        cran.delete(self.delete_id)\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n    def delConfirm(self, val):\n        self.delete_id = val\n        self.sup = SupportWindow(\"Действительно хотите удалить?\", 1)\n        self.sup.show()\n        self.sup.signal.connect(self.mk)\n\n    def openAddCranTypeForm(self):\n        w = QWidget()\n        w.setWindowTitle(\"Добавление типа крана\")\n        w.resize(600, 350)\n        w.l = QFormLayout()\n        w.setLayout(w.l)\n        w.val1 = QLineEdit()\n        w.l.addRow(QLabel('Название'), w.val1)\n        w.val2 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (уголь)'), w.val2)\n        w.val3 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (Чугун, брикеты)'), w.val3)\n        w.val4 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (уголь)'), w.val4)\n        w.val5 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (Чугун, брикеты)'), w.val5)\n        w.val6 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (уголь)'), w.val6)\n        w.val7 = QLineEdit()\n        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (Чугун, брикеты)'),\n                   w.val7)\n        btn = QPushButton('Добавить')\n        btn.released.connect(self.addCranType)\n        w.l.addWidget(btn)\n        self.addCranTypeForm = w\n        self.addCranTypeForm.show()\n\n    def addCranType(self):\n        c = CranType(None, self.addCranTypeForm.val1.text(), self.addCranTypeForm.val2.text(),\n                     self.addCranTypeForm.val3.text(), self.addCranTypeForm.val4.text(),\n                     self.addCranTypeForm.val5.text(), self.addCranTypeForm.val6.text(),\n                     self.addCranTypeForm.val7.text())\n        c.save()\n        self.addCranTypeForm.close()\n\n    def mk(self, val):\n        cran = Cran()\n        cran.deleteByNum(self.delete_id)\n        qw = QWidget()\n        qw.setLayout(self.layout)\n        self.setMainUi()\n\n\n#########################################################\n#                                                       #\n#                                                       #\n#                                                       #\n#         КЛАССЫ ВСПОМОГАТЕЛЬНЫХ ФУНКЦИЙ ОКОН           #\n#                                                       #\n#                                                       #\n#                                                       #\n#########################################################\n\n\nclass MyMplCanvas(FigureCanvas):\n    def __init__(self, parent=None, width=5, height=4, dpi=100):\n        # pass\n        fig = Figure(figsize=(width, height), dpi=dpi)\n        self.axes = fig.add_subplot(111)\n\n        self.compute_initial_figure()\n\n        FigureCanvas.__init__(self, fig)\n        self.setParent(parent)\n\n        FigureCanvas.setSizePolicy(self,\n                                   QSizePolicy.Expanding,\n                                   QSizePolicy.Expanding)\n        FigureCanvas.updateGeometry(self)\n\n    def compute_initial_figure(self):\n        pass\n\n\nclass MyStaticMplCanvas(MyMplCanvas):\n    def __init__(self, parent=None, data=None):\n        # pass\n        self.data = data\n        super().__init__(parent, width=5, height=4, dpi=100)\n\n    def compute_initial_figure(self, data=None):\n        # pass\n        for row in self.data:\n\n            dates = [dt.datetime.fromtimestamp(ts) for ts in row[0]]\n            xfmt = md.DateFormatter('%Y-%m-%d %H:%M')\n            self.axes.xaxis.set_major_formatter(xfmt)\n            self.axes.plot(dates, row[1], row[2], label=row[3])\n            self.axes.legend()\n            for label in self.axes.get_xmajorticklabels():\n                label.set_rotation(20)\n        # self.axes.hist([10,20], 5, normed=1, facecolor='g', alpha=0.75)\n\n\nclass GraphWindow(QWidget):\n    signal = pyqtSignal(str)\n\n    def __init__(self, data=None):\n        super().__init__()\n        self.data = data\n        self.setMainUi()\n        self.resize(700, 500)\n\n    def setMainUi(self):\n        self.layout = QBoxLayout(QBoxLayout.TopToBottom)\n        self.setLayout(self.layout)\n        sc = MyStaticMplCanvas(self, self.data)\n        self.layout.addWidget(sc)\n\n\nclass MyButton(QPushButton):\n    s = pyqtSignal(str)\n\n    def __init__(self, text, parent, val):\n        super().__init__(text, parent)\n        self.d = val\n\n    def mouseReleaseEvent(self, e):\n        QPushButton.mouseReleaseEvent(self, e)\n        self.s.emit(self.d)\n\n\nclass SaveRowButton(QPushButton):\n    s = pyqtSignal(str, str, int)\n\n    def __init__(self, text, parent, id, st_id, row):\n        super().__init__(text, parent)\n        self.id = id\n        self.st_id = st_id\n        self.row = row\n\n    def mouseReleaseEvent(self, e):\n        QPushButton.mouseReleaseEvent(self, e)\n        self.s.emit(self.id, self.st_id, self.row)\n\n\nclass SupportWindow(QWidget):\n    signal = pyqtSignal(int)\n\n    def __init__(self, text, type):\n        self.text = text\n        self.type = type\n        super().__init__()\n        self.setWindowFlags(Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint)\n        self.setMainUi()\n\n    def setMainUi(self):\n        self.layout = QVBoxLayout()\n        self.setLayout(self.layout)\n        lbl = QLabel(self.text)\n        self.layout.addWidget(lbl)\n        widg = QWidget()\n        self.layout.addWidget(widg)\n        ok_b = QPushButton('Ok')\n        deny_b = QPushButton('Отмена')\n        ok_b.released.connect(self.confirm)\n        deny_b.released.connect(self.deny)\n        lo = QHBoxLayout()\n        widg.setLayout(lo)\n        if self.type == 1:\n            lo.addWidget(ok_b)\n        lo.addWidget(deny_b)\n\n    def confirm(self):\n        self.close()\n        self.signal.emit(1)\n\n    def deny(self):\n        self.close()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NewMainWindow.py b/NewMainWindow.py
--- a/NewMainWindow.py	(revision ca3e486479ccfdd5436ee9c86867e17e4cdb6a14)
+++ b/NewMainWindow.py	(date 1655736910070)
@@ -163,15 +163,15 @@
         self.layout.addWidget(b1)
         self.layout.addWidget(b2)
         b1.released.connect(self.openCransForm)
-        # b2.released.connect(self.openOtherEquipForm)
+        b2.released.connect(self.openOtherEquipForm)
 
     def openCransForm(self):
         self.cransF = CranManagementForm()
         self.cransF.show()
 
-    # def openOtherEquipForm(self):
-    #     self.equipF = OtherEquipmqntForm()
-    #     self.equipF.show()
+    def openOtherEquipForm(self):
+        self.equipF = OtherEquipmqntForm()
+        self.equipF.show()
 
 
 
@@ -758,6 +758,344 @@
         w.type.addItem("Причал", 2)
         w.type.addItem("Путь", 3)
         w.type.currentIndexChanged.connect(self.getObjectsByType)
+
+        w.l.addWidget(QLabel("Тип объекта"), 0, 0)
+        w.l.addWidget(w.type, 0, 1)
+
+        self.addObjectToCranForm = w
+        self.addObjectToCranForm.show()
+
+        objects = QComboBox()
+
+        self.addObjectToCranForm.objects = objects
+        self.addObjectToCranForm.l.addWidget(QLabel("Объект"), 1, 0)
+        self.addObjectToCranForm.l.addWidget(objects, 1, 1)
+        self.addObjectToCranForm.add_b = QPushButton("Добавить")
+        self.addObjectToCranForm.add_b.released.connect(self.addObjectToCranDo)
+        self.addObjectToCranForm.l.addWidget(self.addObjectToCranForm.add_b)
+
+        self.getObjectsByType(1)
+
+    def addObjectToCranDo(self):
+        if not hasattr(self.addObjectToCranForm, 'objects'):
+            QMessageBox.about(self, 'Ошибка!', "Добавьте объект")
+            return False
+
+        cr = Cran()
+        c = cr.findBy('num', '=', str(self.cran_num))
+        cran = Cran(None, str(self.cran_num), str(c[0][2]), str(self.addObjectToCranForm.type.currentData()),
+                    str(self.addObjectToCranForm.objects.currentData()))
+        cran.save()
+        qw = QWidget()
+        qw.setLayout(self.layout)
+        self.setMainUi()
+        self.addObjectToCranForm.close()
+
+    def getObjectsByType(self, type=None):
+        type = self.addObjectToCranForm.type.currentData()
+        obs = []
+        if type == 1:
+            s = Storage()
+            obs = s.getAll()
+        if type == 2:
+            d = DocChar()
+            tmp = d.getAll()
+            for i in tmp:
+                obs.append((i[1], "Причал №" + str(i[1])))
+        if type == 3:
+            r = Railway()
+            tmp = r.getAll()
+            for i in tmp:
+                obs.append((i[0], "Путь №" + str(i[1])))
+
+        self.addObjectToCranForm.objects.clear()
+        for ob in obs:
+            self.addObjectToCranForm.objects.addItem(str(ob[1]), ob[0])
+
+    def addCranFormFunc(self):
+        w = QWidget()
+        w.setWindowTitle("Добавление крана")
+        w.resize(400, 400)
+        w.l = QFormLayout()
+        w.setLayout(w.l)
+        w.num = QLineEdit()
+        w.l.addRow(QLabel('Номер крана'), w.num)
+        w.type = QComboBox()
+        cranType = CranType()
+        c = cranType.getAll()
+        for i in c:
+            w.type.addItem(i[1], i[0])
+
+        w.l.addRow(QLabel('Тип крана'), w.type)
+        btn = QPushButton('Добавить!')
+        btn.released.connect(self.doAddCran)
+        w.l.addWidget(btn)
+        btn = QPushButton('Добавить тип крана')
+        btn.released.connect(self.openAddCranTypeForm)
+        w.l.addWidget(btn)
+        w.l.addWidget(QLabel('Типы кранов'))
+        cran_type = CranType()
+        ct = cran_type.getAll()
+        for i in ct:
+            buttons_w = QWidget()
+            lay = QBoxLayout(QBoxLayout.LeftToRight)
+            buttons_w.setLayout(lay)
+
+            s = str(i[0])
+            p = MyButton('Просмотр', None, s)
+            p.s.connect(self.editCranType)
+            lay.addWidget(p)
+            p = MyButton('Удалить', None, s)
+            p.s.connect(self.delCranTypeConfirm)
+            lay.addWidget(p)
+            w.l.addRow(QLabel(i[1]), buttons_w)
+        self.addCranForm = w
+        self.addCranForm.show()
+
+    def editCranType(self, val):
+        cr = CranType()
+        c = cr.find(val)
+        self.edit_cran_id = val
+        w = QWidget()
+        w.setWindowTitle("Добавление типа крана")
+        w.resize(600, 350)
+        w.l = QFormLayout()
+        w.setLayout(w.l)
+        w.val1 = QLineEdit()
+        w.val1.setText(str(c[0][1]))
+        w.l.addRow(QLabel('Название'), w.val1)
+        w.val2 = QLineEdit()
+        w.val2.setText(str(c[0][2]))
+        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (уголь)'), w.val2)
+        w.val3 = QLineEdit()
+        w.val3.setText(str(c[0][3]))
+        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (Чугун, брикеты)'), w.val3)
+        w.val4 = QLineEdit()
+        w.val4.setText(str(c[0][4]))
+        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (уголь)'), w.val4)
+        w.val5 = QLineEdit()
+        w.val5.setText(str(c[0][5]))
+        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (Чугун, брикеты)'), w.val5)
+        w.val6 = QLineEdit()
+        w.val6.setText(str(c[0][6]))
+        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (уголь)'), w.val6)
+        w.val7 = QLineEdit()
+        w.val7.setText(str(c[0][7]))
+        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (Чугун, брикеты)'),
+                   w.val7)
+        btn = QPushButton('Сохранить')
+        btn.released.connect(self.editCranTypeDo)
+        w.l.addWidget(btn)
+        self.editCranTypeForm = w
+        self.editCranTypeForm.show()
+
+    def editCranTypeDo(self):
+        cran = CranType(self.edit_cran_id, self.editCranTypeForm.val1.text(), self.editCranTypeForm.val2.text(),
+                        self.editCranTypeForm.val3.text(), self.editCranTypeForm.val4.text(),
+                        self.editCranTypeForm.val5.text(), self.editCranTypeForm.val6.text(),
+                        self.editCranTypeForm.val7.text())
+        cran.save()
+        self.editCranTypeForm.close()
+
+    def delCranTypeConfirm(self, val):
+        self.delete_id = val
+        self.sup = SupportWindow("Действительно хотите удалить?", 1)
+        self.sup.show()
+        self.sup.signal.connect(self.delCranType)
+
+    def delCranType(self):
+        cran_type = CranType()
+        cran_type.delete(self.delete_id)
+        self.addCranForm.close()
+        self.addCranFormFunc()
+
+    def doAddCran(self):
+        crans = Cran(None, self.addCranForm.num.text(), str(self.addCranForm.type.currentData()), "", "")
+        crans.save()
+        qw = QWidget()
+        qw.setLayout(self.layout)
+        self.setMainUi()
+        self.addCranForm.close()
+
+    def delObjectConfirm(self, val):
+        self.delete_id = val
+        self.sup = SupportWindow("Действительно хотите удалить?", 1)
+        self.sup.show()
+        self.sup.signal.connect(self.deleteObject)
+
+    def deleteObject(self, val):
+        cran = Cran()
+        cran.delete(self.delete_id)
+        qw = QWidget()
+        qw.setLayout(self.layout)
+        self.setMainUi()
+
+    def delConfirm(self, val):
+        self.delete_id = val
+        self.sup = SupportWindow("Действительно хотите удалить?", 1)
+        self.sup.show()
+        self.sup.signal.connect(self.mk)
+
+    def openAddCranTypeForm(self):
+        w = QWidget()
+        w.setWindowTitle("Добавление типа крана")
+        w.resize(600, 350)
+        w.l = QFormLayout()
+        w.setLayout(w.l)
+        w.val1 = QLineEdit()
+        w.l.addRow(QLabel('Название'), w.val1)
+        w.val2 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (уголь)'), w.val2)
+        w.val3 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с кучи т/смена (Чугун, брикеты)'), w.val3)
+        w.val4 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (уголь)'), w.val4)
+        w.val5 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с подвозом груза т/смена (Чугун, брикеты)'), w.val5)
+        w.val6 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (уголь)'), w.val6)
+        w.val7 = QLineEdit()
+        w.l.addRow(QLabel('Производительность при работе с ж/д составом вагон/смена и т/смена (Чугун, брикеты)'),
+                   w.val7)
+        btn = QPushButton('Добавить')
+        btn.released.connect(self.addCranType)
+        w.l.addWidget(btn)
+        self.addCranTypeForm = w
+        self.addCranTypeForm.show()
+
+    def addCranType(self):
+        c = CranType(None, self.addCranTypeForm.val1.text(), self.addCranTypeForm.val2.text(),
+                     self.addCranTypeForm.val3.text(), self.addCranTypeForm.val4.text(),
+                     self.addCranTypeForm.val5.text(), self.addCranTypeForm.val6.text(),
+                     self.addCranTypeForm.val7.text())
+        c.save()
+        self.addCranTypeForm.close()
+
+    def mk(self, val):
+        cran = Cran()
+        cran.deleteByNum(self.delete_id)
+        qw = QWidget()
+        qw.setLayout(self.layout)
+        self.setMainUi()
+
+
+class OtherEquipmqntForm(QWidget):
+    signal = pyqtSignal(str)
+
+    def __init__(self):
+        super().__init__()
+        self.setWindowTitle("Вспомогательная Техника")
+        self.resize(600, 400)
+        self.setMainUi()
+
+    def setMainUi(self):
+        self.layout = QBoxLayout(QBoxLayout.TopToBottom)
+        self.setLayout(self.layout)
+        self.table = QTableWidget()
+        row_w = QWidget()
+        self.table.setRowCount(1)
+        self.table.setColumnCount(4)
+        thead = ["Номер объекта","Тип", "Модель", "  Удаление   ", "Добавление объектов"]
+        row_w_l = QBoxLayout(QBoxLayout.LeftToRight)
+        row_w.setLayout(row_w_l)
+        col_num = 0
+        for val in thead:
+            row_w_l.addWidget(QLabel(val))
+            self.table.setItem(0, col_num, QTableWidgetItem(str(val)))
+            col_num += 1
+
+        # self.layout.addWidget(row_w)
+        row_num = 0
+        equip = Equip()
+        for i in equip.getAllGroupBy():
+            row_w = QWidget()
+            row_w_l = QBoxLayout(QBoxLayout.LeftToRight)
+            row_w.setLayout(row_w_l)
+            row_num += 1
+            self.table.setRowCount((row_num + 1))
+            self.table.setItem(row_num, 0, QTableWidgetItem(str(i[1])))
+            row_w_l.addWidget(QLabel(str(i[1])))
+            cran_type = CranType()
+            ct = cran_type.find(i[2])
+            row_w_l.addWidget(QLabel(str(ct[0][1])))
+            self.table.setItem(row_num, 1, QTableWidgetItem(str(ct[0][1])))
+            col_num = 0
+            # for j in i:
+            # self.table.setItem(row_num, col_num, QTableWidgetItem(str(j)))
+            # col_num += 1
+
+            cr = equip.findBy('num', '=', str(i[1]))
+            cor_3_wgt = QWidget()
+            cor_l = QFormLayout()
+            cor_3_wgt.setLayout(cor_l)
+            for row in cr:
+                if row[3] != '':
+                    name = ""
+                    if int(row[3]) == 1:
+                        s = Storage()
+                        tmp = s.find(str(row[4]))
+                        name = tmp[0][1]
+                    if int(row[3]) == 2:
+                        name = "Причал №" + str(row[4])
+                    if int(row[3]) == 3:
+                        name = "Путь №" + str(i[4])
+                    name = str(name)
+                    s = str(row[0])
+                    p = MyButton('Удалить', None, s)
+                    p.s.connect(self.delObjectConfirm)
+                    cor_l.addRow(QLabel(name), p)
+
+            # row_w_l.addWidget(cor_3_wgt)
+            cor_3_wgt.resize(100, 100)
+            self.table.setCellWidget(row_num, 2, cor_3_wgt)
+
+            w = QWidget()
+            s = str(i[1])
+            p = MyButton('Удалить', w, s)
+            p.s.connect(self.delConfirm)
+            w.resize(120, 30)
+            self.table.setCellWidget(row_num, 3, w)
+            w = QWidget()
+            s = str(i[1])
+            p = MyButton('Добавить объект', w, s)
+            p.s.connect(self.addObjectToCran)
+            w.resize(130, 30)
+            self.table.setCellWidget(row_num, 4, w)
+            # row_w_l.addWidget(cor_3_wgt)
+            # self.layout.addWidget(row_w)
+            # w = QWidget()
+            # s = str(i[0])
+            # p = SaveRowButton('Сохранить', w, s, str(row_num), (col_num - 2))
+            # p.s.connect(self.save_W)
+            # self.table.setCellWidget(row_num, col_num, w)
+
+        self.table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
+        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
+        self.table.verticalHeader().setDefaultSectionSize(40)
+        self.table.horizontalHeader().setDefaultSectionSize(130)
+        self.layout.addWidget(self.table)
+
+        w = QWidget()
+        l = QHBoxLayout()
+        w.setLayout(l)
+        self.layout.addWidget(w)
+        add_b = QPushButton('Добавить кран')
+        l.addWidget(add_b)
+        add_b.released.connect(self.addCranFormFunc)
+
+        return False
+
+    def addObjectToOther(self, val):
+        self.cran_num = val
+        w = QWidget()
+        w.setWindowTitle("Добавить объект")
+        w.l = QGridLayout()
+        w.setLayout(w.l)
+        w.type = QComboBox()
+        w.type.addItem("Склад", 1)
+        w.type.addItem("Причал", 2)
+        w.type.addItem("Путь", 3)
+        w.type.currentIndexChanged.connect(self.getObjectsByType)
 
         w.l.addWidget(QLabel("Тип объекта"), 0, 0)
         w.l.addWidget(w.type, 0, 1)
Index: ContentManagement.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\nimport os\nimport sqlite3\ndb = \"den\"\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\ndb_path = os.path.join(BASE_DIR, db + \".db\")\ndb_connection = sqlite3.connect(db_path)\n\n\nclass Meteo:\n    def __init__(self, windV, windStart, windEnd, precipitation):\n        self.windV = windV\n        self.windStart = windStart\n        self.windEnd = windEnd\n        self.precipitation = precipitation\n\n\nclass Cargo:\n    def __init__(self, id=None, type=None):\n        self.id = id\n        self.type = type\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into cargo_types (name) VALUES('\" + self.type + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM cargo_types WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from cargo_types where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from cargo_types\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass TypicalShip():\n    def __init__(self, id=None, type=None):\n        self.id = id\n        self.type = type\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into typical_ships (name) VALUES('\" + self.type + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM typical_ships WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from typical_ships where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from typical_ships\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass Storage():\n    def __init__(self, id=None, name=None):\n        self.id = id\n        self.name = name\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into storages (name) VALUES('\" + self.name + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM storages WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from storages where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getByExpCargo(self, expeditor, cargo):\n        c = db_connection.cursor()\n        c.execute(\"select * from expeditor_storage_link where expeditor_id = '\" + str(expeditor) + \"' and cargo = '\" + str(cargo) + \"'\")\n        res = c.fetchall()\n        return res\n\n    def setQuery(self, query):\n        c = db_connection.cursor()\n        c.execute(query)\n        db_connection.commit()\n\n    def deleteExpeditor(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM expeditor_storage_link WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def getExpeditors(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from expeditor_storage_link where storage_id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def addExpeditor(self, storage_id, expeditor_id, cargo, cargo_amount):\n        c = db_connection.cursor()\n        c.execute(\"insert into expeditor_storage_link (storage_id, expeditor_id, cargo, cargo_amount) VALUES('\" + storage_id + \"','\" + expeditor_id + \"','\" + cargo + \"','\" + cargo_amount + \"')\")\n        db_connection.commit()\n        return c.lastrowid\n\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from storages\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass StorageDefVal():\n    def __init__(self, id=None, storage=None, cargo=None, capUF=None, capW=None):\n        self.id = id\n        self.storage = storage\n        self.cargo = cargo\n        self.capUF = capUF\n        self.capW = capW\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE storage_default_values set storage = '\" + self.storage + \"' , cargo = '\" + self.cargo + \"', capUF = '\" + self.capUF + \"', capW = '\" + self.capW + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into storage_default_values (storage,cargo,capUF,capW) VALUES('\" + self.storage + \"','\" + self.cargo + \"','\" + self.capUF + \"','\" + self.capW + \"')\")\n            db_connection.commit()\n        return True\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM storage_default_values WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from storage_default_values where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from storage_default_values where \" + col + \" \" + param + \":\" + value + \"\", {\"\" + value + \"\": value})\n        res = c.fetchall()\n        return res\n\n    def findBy(self, params):\n        select = \"SELECT * FROM storage_default_values WHERE 1 \"\n        where = \"\"\n        for k,v in params.items():\n            where += \" AND \" + k + \" = \" + v + \" \"\n        select += where\n        c = db_connection.cursor()\n        c.execute(select)\n        res = c.fetchall()\n        return res\n\n    def getAllClean(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from storage_default_values\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from storage_default_values\n        \"\"\")\n        res = c.fetchall()\n        storages = Storage()\n        cargos = Cargo()\n        k = 0\n        for i in res:\n            st = storages.find(i[1])\n            cargo = cargos.find(i[2])\n            i = list(i)\n            i[1] = st[0][1]\n            i[2] = cargo[0][1]\n            i = tuple(i)\n            res[k] = i\n            k += 1\n        return res\n\n\nclass StorageCap():\n    def __init__(self, id=None, storage=None, coal_cap=None, pellet_cap=None, iron_cap=None):\n        self.id = id\n        self.storage = storage\n        self.coal_cap = coal_cap\n        self.pellet_cap = pellet_cap\n        self.iron_cap = iron_cap\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into storage_capacity (storage,coal_cap,pellet_cap,iron_cap) VALUES('\" + self.storage + \"','\" + self.coal_cap + \"','\" + self.pellet_cap + \"','\" + self.iron_cap + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM storage_capacity WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n\n    def getAllClean(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from storage_capacity\n        \"\"\")\n        res = c.fetchall()\n\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from storage_capacity\n        \"\"\")\n        res = c.fetchall()\n        storages = Storage()\n        k = 0\n        for i in res:\n            st = storages.find(i[1])\n\n            i = list(i)\n            i[1] = st[0][1]\n            i = tuple(i)\n            res[k] = i\n            k += 1\n\n        return res\n\n\n\nclass Ship():\n    def __init__(self, id=None, ship_length=None, osadka=None, max_weight=None, arrival_time=None, name=None, doc=None, priority = None):\n        self.id = id\n        self.ship_length = ship_length\n        self.osadka = osadka\n        self.arrival_time = arrival_time\n        self.name = name\n        self.max_weight = max_weight\n        self.doc = doc\n        # if doc == None:\n        #     self.doc == \"\"\n        self.priority = \"0\"\n        if priority != None:\n            self.priority = priority\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into ships (ship_length,osadka,arrival_time,name,max_weight,doc,priority) VALUES('\" + self.ship_length + \"','\" + self.osadka + \"','\" + self.arrival_time + \"','\" + self.name + \"','\" + self.max_weight + \"','\" + self.doc + \"', '\" + self.priority + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM ships WHERE id = \" + id + \" \")\n        db_connection.commit()\n        c.execute(\"DELETE FROM expeditor_ship_link WHERE ship_id = \" + id + \" \")\n        db_connection.commit()\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from ships where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getAllClean(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from ships\n        \"\"\")\n        res = c.fetchall()\n\n        return res\n\n    def getExpeditors(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from expeditor_ship_link where ship_id=:id\", {\"id\": id})\n        res = c.fetchall()\n\n        return res\n\n    def addExpeditor(self, ship_id, expeditor_id, cargo, cargo_amount):\n        c = db_connection.cursor()\n        c.execute(\"insert into expeditor_ship_link (ship_id, expeditor_id, cargo, cargo_amount) VALUES('\" + ship_id + \"','\" + expeditor_id + \"','\" + cargo + \"','\" + cargo_amount + \"')\")\n        db_connection.commit()\n\n    def deleteExpeditor(self, id):\n        c = db_connection.cursor()\n        c.execute(\"delete from expeditor_ship_link where id = \" + id)\n        db_connection.commit()\n\n    def getLast(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT id, name, arrival_time,ship_length,osadka,max_weight,doc from ships order by id asc limit 1\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n    def getFirstByTime(self, offset):\n        c = db_connection.cursor()\n        c.execute(\"SELECT id, name, arrival_time,ship_length,osadka,max_weight,doc,priority from ships order by arrival_time asc limit \" + offset + \",1\")\n        res = c.fetchall()\n        return res\n\n    def getByQuery(self, query):\n        c = db_connection.cursor()\n\n        try:\n            c.execute(query)\n        except sqlite3.Error as e:\n            print(\"An error occurred:\", e.args[0])\n        res = c.fetchall()\n        return res\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from ships where \" + col + \" \" + param + \" \"  + value + \" \")\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT id, name, arrival_time,ship_length,osadka,max_weight,doc,priority  from ships\n        \"\"\")\n        res = c.fetchall()\n        # cargo = Cargo()\n        # k = 0\n        # for i in res:\n            # c = cargo.find(i[1])\n\n            # i = list(i)\n            # i[1] = c[0][1]\n            # i = tuple(i)\n            # res[k] = i\n            # k += 1\n\n        return res\n\n\nclass Train():\n    def __init__(self, id=None, cargo=None, cargo_amount=None, arrival_time=None, expeditor_id = None, carriages_amount = None, direct_way = None, num = None, railway=None, ship_id=None):\n        self.id = id\n        self.cargo = cargo\n        self.cargo_amount = cargo_amount\n        self.arrival_time = arrival_time\n        self.expeditor_id = expeditor_id\n        self.carriages_amount = carriages_amount\n        self.direct_way = direct_way\n        self.num = num\n        self.railway = railway\n        self.ship_id = ship_id\n        if ship_id == None:\n            self.ship_id = \"\"\n\n    def save(self):\n        c = db_connection.cursor()\n        c.execute(\"insert into trains (cargo,cargo_amount,arrival_time,expeditor_id,carriages_amount,direct_way, num, railway, ship_id) VALUES('\" + self.cargo + \"','\" + self.cargo_amount + \"','\" + self.arrival_time + \"','\" + self.expeditor_id + \"','\" + self.carriages_amount + \"','\" + self.direct_way + \"','\" + self.num + \"','\" + self.railway + \"', '\" + self.ship_id + \"')\")\n        db_connection.commit()\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM trains WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from trains where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from trains where \" + col + \" \" + param + \" \"  + value + \" \")\n        res = c.fetchall()\n        return res\n\n    def getFirstByTime(self, offset):\n        c = db_connection.cursor()\n        c.execute(\"SELECT * from trains order by arrival_time asc limit \" + offset + \",1\")\n        res = c.fetchall()\n        return res\n\n    def getByQuery(self, query):\n        c = db_connection.cursor()\n\n        try:\n            c.execute(query)\n        except sqlite3.Error as e:\n            print(\"An error occurred:\", e.args[0])\n        res = c.fetchall()\n        return res\n\n    def getAllClean(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from trains\n        \"\"\")\n        res = c.fetchall()\n\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT id, num, expeditor_id, arrival_time, cargo, carriages_amount, direct_way,railway from trains\n        \"\"\")\n        res = c.fetchall()\n        cargo = Cargo()\n        k = 0\n        for i in res:\n            c = cargo.find(i[4])\n\n            i = list(i)\n            i[4] = c[0][1]\n            i = tuple(i)\n            res[k] = i\n            k += 1\n\n        return res\n\n\n\nclass DocChar():\n    def __init__(self, id=None, num=None, length=None, depth=None, is_used=None):\n        self.id = id\n        self.num = num\n        self.length = length\n        self.depth = depth\n        self.is_used = is_used\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE doc_characteristics set num = '\" + self.num + \"' , length = '\" + self.length + \"', depth = '\" + self.depth + \"', is_used = '\" + self.is_used + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into doc_characteristics (num,length,depth, is_used) VALUES('\" + self.num + \"','\" + self.length + \"','\" + self.depth + \"','')\")\n            db_connection.commit()\n        return True\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from doc_characteristics where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM doc_characteristics WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def update(self, id, col, val):\n        c = db_connection.cursor()\n        c.execute(\"UPDATE doc_characteristics set \" + col + \" = '\" + val + \"' WHERE id = '\" + id + \"'\")\n        db_connection.commit()\n\n    def unuseDoc(self, id):\n        self.update(str(id),\"is_used\", \"\" )\n\n    def useDoc(self, id):\n        self.update(str(id),\"is_used\", \"1\" )\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from doc_characteristics where \" + col + \" \" + param + \"\"  + value + \" \")\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from doc_characteristics\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass CranType():\n    def __init__(self, id=None, name=None, performance_coal_1=None, performance_iron_1=None, performance_coal_2=None, performance_iron_2=None, performance_coal_3=None, performance_iron_3=None):\n        self.id = id\n        self.name = name\n        self.performance_coal_1 = performance_coal_1\n        self.performance_iron_1 = performance_iron_1\n        self.performance_coal_2 = performance_coal_2\n        self.performance_iron_2 = performance_iron_2\n        self.performance_coal_3 = performance_coal_3\n        self.performance_iron_3 = performance_iron_3\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE cran_types set name = '\" + self.name + \"', performance_coal_1 = '\" + self.performance_coal_1 + \"' , performance_iron_1 = '\" + self.performance_iron_1 + \"', performance_coal_2 = '\" + self.performance_coal_2 + \"', performance_iron_2 = '\" + self.performance_iron_2 + \"' , performance_coal_3 = '\" + self.performance_coal_3 + \"' , performance_iron_3 = '\" + self.performance_iron_3 + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into cran_types (name,performance_coal_1,performance_iron_1, performance_coal_2, performance_iron_2,performance_coal_3,performance_iron_3) VALUES('\" + self.name + \"','\" + self.performance_coal_1 + \"','\" + self.performance_iron_1 + \"','\" + self.performance_coal_2 + \"','\" + self.performance_iron_2 + \"','\" + self.performance_coal_3 + \"','\" + self.performance_iron_3 + \"')\")\n            db_connection.commit()\n        return True\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from cran_types where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from cran_types where \" + col + \" \" + param + \" \"  + value + \" \")\n        res = c.fetchall()\n        return res\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM cran_types WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from cran_types\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass Cran():\n    def __init__(self, id=None, num=None, cran_type=None, type=None, object_id=None):\n        # type 1 - склад 2 - причал 3 - Ж/Д\n        self.id = id\n        self.num = num\n        self.cran_type = cran_type\n        self.type = type\n        self.object_id = object_id\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE crans set num = '\" + self.num + \"', cran_type = '\" + self.cran_type + \"' , type = '\" + self.type + \"', object_id = '\" + self.object_id + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into crans (num,cran_type,type, object_id) VALUES('\" + self.num + \"','\" + self.cran_type + \"','\" + self.type + \"','\" + self.object_id + \"')\")\n            db_connection.commit()\n        return True\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from crans where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM crans WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from crans where \" + col + \" \" + param + \" \"  + value + \" \")\n        res = c.fetchall()\n        return res\n\n    def deleteByNum(self, num):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM crans WHERE num = \" + num + \" \")\n        db_connection.commit()\n\n    def findBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from crans where \" + col + \" \" + param + \":\" + value + \"\", {\"\" + value + \"\": value})\n        res = c.fetchall()\n        return res\n\n    def getAllGroupBy(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        select * from crans group by num\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from crans\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass Expeditor():\n    def __init__(self, id=None, name=None):\n        self.id = id\n        self.name = name\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE expeditors set name = '\" + self.name + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into expeditors (name) VALUES('\" + self.name + \"')\")\n            db_connection.commit()\n        return True\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from expeditors where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM expeditors WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from expeditors\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass Railway:\n    def __init__(self, id=None, num=None, is_used=None, time_start_usage=None):\n        self.id = id\n        self.num = num\n        self.is_used = is_used\n        self.time_start_usage = time_start_usage\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE railways set num = '\" + self.num + \"', is_used = '\" + self.is_used + \"', time_start_usage = '\" + self.time_start_usage + \"' WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into railways (num, is_used,time_start_usage) VALUES('\" + self.num + self.is_used + \"', 0,0)\")\n            db_connection.commit()\n        return True\n\n    def find(self, id):\n        c = db_connection.cursor()\n        c.execute(\"select * from railways where id=:id\", {\"id\": id})\n        res = c.fetchall()\n        return res\n\n\n    def getBy(self, col, param, value):\n        c = db_connection.cursor()\n        c.execute(\"select * from railways where \" + col + \" \" + param + \":\" + value + \"\", {\"\" + value + \"\": value})\n        res = c.fetchall()\n        return res\n\n    def getUnused(self):\n        res = self.getBy('is_used', '!=', '1')\n        return res\n\n    def delete(self, id):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM railways WHERE id = \" + id + \" \")\n        db_connection.commit()\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from railways\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\nclass CranService():\n    def __init__(self, id=None, cran_num=None, date_end=None, date_start=None):\n        self.id = id\n        self.cran_num = cran_num\n        self.date_end = date_end\n        self.date_start = date_start\n\n    def save(self):\n        c = db_connection.cursor()\n        if self.id != None:\n            c.execute(\"UPDATE cran_service set date_end = '\" + self.date_end + \"', date_start = '\" + self.date_start + \"'  WHERE id = '\" + self.id + \"'\")\n            db_connection.commit()\n        else:\n            c.execute(\"insert into cran_service (cran_num, date_end, date_start) VALUES('\" + self.cran_num + \"', '\" + self.date_end + \"', '\" + self.date_start + \"')\")\n            db_connection.commit()\n        return True\n\n    def find(self, cran_num):\n        c = db_connection.cursor()\n        c.execute(\"select * from cran_service where cran_num=:id\", {\"id\": cran_num})\n        res = c.fetchall()\n        return res\n\n    def delete(self, cran_num):\n        c = db_connection.cursor()\n        c.execute(\"DELETE FROM cran_service WHERE cran_num = \" + cran_num + \" \")\n        db_connection.commit()\n\n    def getAll(self):\n        c = db_connection.cursor()\n        c.execute(\"\"\"\n        SELECT * from cran_service\n        \"\"\")\n        res = c.fetchall()\n        return res\n\n\n\n\nclass Main():\n    def __init__(self, workers = None, tech = None, METEO = None):\n        self.meteo = METEO\n        self.workers_resource = workers\n        self.tech_resource = tech\n        self.calculated_ships = []\n        self.calculated_trains = []\n\n        # Список добавленных id в таблицу expeditor_storage_link \n        self.exp_stor_link_meta = []\n\n\n        # self.time_lines - Основной массив с информацией об операциях [[время начала, время окончания, тип объекта, id объекта, путь/причал, второй тип объекта, id объекта, путь/причал, количество груза, [массив кранов], количество людей, количество техники], ...]\n        # путь/причал = None, если объект - склад\n        # типы объектов - 1 состав, 2 - судно, 3 - склад\n        self.time_lines = []\n\n\n    def getNextObject(self):\n        ship_instance = Ship()\n        ship = ship_instance.getFirstByTime(str(len(self.calculated_ships)))\n        train_inst = Train()\n        train = train_inst.getFirstByTime(str(len(self.calculated_trains)))\n\n\n        if ship != [] and train != []:\n            if int(ship[0][2]) < int(train[0][3]):\n                self.calculateShip(ship[0][0])\n            else:\n                self.calculateTrain(train)\n        else:\n            if ship != []:\n                self.calculateShip(ship[0][0])\n            if train != []:\n                self.calculateTrain(train)\n\n        if ship == [] and train == []:\n            return False\n\n    def sortStoragesByCongestion(self, storages):\n        if storages != []:\n            new_storages = []\n            congestions = []\n\n            for row in storages:\n                congestion = self.getStorageCongestion(row[2])\n                congestions.append(congestion)\n\n\n\n            while storages != []:\n                idx = congestions.index(max(congestions))\n                new_storages.append(storages[idx])\n                storages.remove(storages[idx])\n                congestions.remove(max(congestions))\n\n\n            return new_storages\n        else:\n            return False\n\n    def setTrainRailway(self, arrival_time = None, ship_id = None, cargo = None, expeditor = None):\n        t = Train()\n        trains = t.getByQuery(\"SELECT * FROM trains WHERE (railway != '' AND railway != 0)\")\n        if ship_id == \"\" or ship_id == \"None\" or ship_id == \"0\" or ship_id == \"Null\":\n            ship_id = None\n\n        used_rws = []\n        tr_ids = []\n        all_rws = [2,3,1,4]\n        waiting_time = 7200\n        if trains != []:\n            for tr in trains:\n                tr_ids.append(tr[0])\n                used_rws.append(tr[8])\n\n        if self.time_lines != []:\n            for arr in self.time_lines:\n                if arr[2] == 1:\n                    if arrival_time > arr[0] and arrival_time < arr[1]:\n                        if arr[4] not in used_rws:\n                            used_rws.append(arr[4])\n                            continue\n\n\n                    if arrival_time > (arr[1] + waiting_time):\n                        if arr[3] in tr_ids:\n                            if arr[4] in used_rws:\n                                used_rws.remove(arr[4])\n\n        if used_rws != []:\n            for rway in used_rws:\n                if rway in all_rws:\n                    all_rws.remove(rway)\n\n\n        ship_instance = Ship()\n        tmp_free_rw = 0\n\n        if ship_id != None:\n            if isinstance(ship_id, list):\n                ship = ship_id\n                if (int(arrival_time) + 86400) > int(ship[0][5]):\n                    if ship[0][8] == 2 or ship[0][8] == 3:\n                        tmp_free_rw = 4\n\n\n                    if ship[0][8] == 5 or ship[0][8] == 6:\n                        tmp_free_rw = 1\n\n                if tmp_free_rw in all_rws:\n                    return tmp_free_rw\n\n            else:\n                ship = ship_instance.find(ship_id)\n                if (int(arrival_time) + 86400) > int(ship[0][5]):\n                    if ship[0][8] == 2 or ship[0][8] == 3:\n                        tmp_free_rw = 4\n\n\n                    if ship[0][8] == 5 or ship[0][8] == 6:\n                        tmp_free_rw = 1\n\n                if tmp_free_rw in all_rws:\n                    return tmp_free_rw\n\n        docs_ids = '2,3,5,6'\n        ships = ship_instance.getBy('doc', 'in', ' (' + docs_ids + ') order by arrival_time asc')\n        if ships != []:\n            for ship in ships:\n                if tmp_free_rw != 0:\n                    break\n                exps = ship_instance.getExpeditors(ship[0])\n                if exps != []:\n                    for exp in exps:\n                        if (int(arrival_time) + 86400) > int(ship[5]) and int(exp[3]) == int(cargo) and int(exp[2]) == int(expeditor):\n                            if ship[8] == 2 or ship[8] == 3:\n                                tmp_free_rw = 4\n\n                            if ship[8] == 5 or ship[8] == 6:\n                                tmp_free_rw = 1\n\n                            break\n\n            if tmp_free_rw in all_rws:\n                return tmp_free_rw\n\n        if ship_id == None:\n            tmp_free_rw = all_rws[0]\n\n        return tmp_free_rw\n\n    def calculateTrain(self, train, from_ship_func = None):\n        # кортеж состава (id, тип груза, количество груза, дата прибытия, количество вагонов, id экспедитора, прямой путь, номер поезда, номер пути, дата отправления, id судна)\n        train_inst = Train()\n        storage_instance = Storage()\n        cran = Cran()\n\n        ship_instance = Ship()\n        already_loaded = 0\n        total_time = 0\n        # время начала операции\n        time_start = train[0][3]\n        prior_storages = []\n        oper_time_start = 0\n        loaded = 0\n\n        if train[0][8] == \"\" or train[0][8] == \"0\" or train[0][8] == \"None\" or train[0][8] == None:\n            train[0] = list(train[0])\n            train[0][8] = self.setTrainRailway(train[0][3], train[0][10], train[0][1], train[0][5])\n            train[0] = tuple(train[0])\n\n        if train[0][8] < 1:\n            self.getNextObject()\n            return False\n\n        if train[0][8] == 1:\n            prior_storages = [9,11]\n        if train[0][8] == 2:\n            prior_storages = [8,10,7,12]\n        if train[0][8] == 3:\n            prior_storages = [3,2]\n        if train[0][8] == 4:\n            prior_storages = [2,1]\n\n\n\n        if str(train[0][10]) != '' and str(train[0][10]).lower() != 'null' and str(train[0][10]) != '0' and str(train[0][10]) != None and str(train[0][10]) != 'None':\n            self.calculateShip(train[0][10], 1)\n            return False\n\n        # docs_ids = '2,3,5,6'\n        if from_ship_func == None:\n            # ships = ship_instance.getBy('doc', '!=', ' (' + docs_ids + ') order by arrival_time asc')\n            ships = ship_instance.getBy('id', '>', ' 0 order by arrival_time asc')\n            if ships != []:\n                for ship in ships:\n                    exps = ship_instance.getExpeditors(ship[0])\n                    if exps != []:\n                        for exp in exps:\n                            if (int(train[0][3]) + 86400) > int(ship[5]) and int(train[0][3]) < int(ship[5]) and int(exp[3]) == int(train[0][1]) and int(exp[2]) == int(train[0][5]):\n                                self.calculateShip(ship[0])\n                                return False\n\n\n            if self.time_lines != []:\n                for row in self.time_lines:\n                    if row[1] == 0 and row[2] == 2:\n                        ship_exps = []\n                        tmp_s_exps = ship_instance.getExpeditors(row[3])\n                        for r_s in tmp_s_exps:\n                            for tl in self.time_lines:\n                                if tl[5] == 2 and tl[6] == row[3]:\n                                    if r_s[3] == tl[8]:\n                                        if r_s[4] != tl[9]:\n                                            val = r_s[4] - tl[9]\n                                            ship_exps.append((r_s[0],r_s[1],r_s[2],r_s[3],val))\n\n\n                        if ship_exps != []:\n                            for s_ex in ship_exps:\n                                if s_ex[2] == train[0][5] and s_ex[3] == train[0][1]:\n                                    self.calculateShip(row, None, train[0][0])\n                                    return False\n\n\n        storage_exps = storage_instance.getByExpCargo(train[0][5], train[0][1])\n        if storage_exps != []:\n            congestions = []\n            # Сортируем по заполненности складов \n            sorted = self.sortStoragesByCongestion(storage_exps)\n            # tmp_stor = []\n            # for st_id in prior_storages:\n                # for s_t in sorted:\n                    # if s_t[0] == st_id:\n                        # tmp_stor.append(s_t)\n                        # sorted.remove(s_t)\n\n            # sorted = tmp_stor + sorted\n            for storage in sorted:\n                storage_id = int(storage[2])\n                if self.getStorageCongestion(storage_id) > 98:\n                    continue\n\n                # Если есть приоритетные склады с этим же грузом этого же экспедитора\n                if storage_id in prior_storages:\n                    if already_loaded != train[0][2]:\n                        stor_left = self.getStorageCongestionLeft(storage[3], storage_id)\n                        oper_time_start = train[0][3]\n                        if time_start != train[0][3]:\n                            oper_time_start = time_start\n\n                        check_array = self.checkTime(oper_time_start)\n\n                        if check_array[0] < 1 or check_array[1] < 1:\n                            continue\n\n\n                        additional_ids = \"\"\n                        if check_array[2] != []:\n                            additional_ids = \" and num NOT IN (\"\n                            for cr in check_array[2]:\n                                additional_ids += \"'\" + str(cr) + \"', \"\n\n                            additional_ids = additional_ids[:-2] + \")\"\n                        stor_crans = cran.getBy('object_id', '=', str(storage_id) + \" and type=1\" + additional_ids)\n\n                        if stor_crans == []:\n                            continue\n\n                        # Pnorm кранов\n                        Pnorm = 0\n                        workers_per_cran = 1\n                        if int(train[0][1]) == 26:\n                            workers_per_cran = 2\n                        tech_per_cran = 1\n\n                        if len(stor_crans) > 3:\n                            stor_crans = stor_crans[0:3]\n\n                        workers = workers_per_cran * len(stor_crans)\n                        tech = tech_per_cran * len(stor_crans)\n                        tmp_cr_list = []\n                        used_crans = []\n                        for cr1 in stor_crans:\n                            used_crans.append(cr1[1])\n                            c_t = CranType()\n                            c = c_t.find(cr1[2])\n                            if int(train[0][1]) == 1:\n                                tmp_cr_list.append(int(c[0][6]))\n                            else:\n                                tmp_cr_list.append(int(c[0][7]))\n\n                        Pnorm = sum(tmp_cr_list)\n\n                        if check_array[0] < workers or check_array[1] < tech:\n                            tmp_pnorm = Pnorm\n                            Pnorm = min((check_array[0] / workers), (check_array[1] / tech)) * tmp_pnorm\n                            workers = check_array[0]\n                            tech = check_array[1]\n\n\n                        loaded = 0\n                        if stor_left >= (int(train[0][2]) - int(already_loaded)):\n                            loaded = (int(train[0][2]) - int(already_loaded))\n                            already_loaded = already_loaded + (int(train[0][2]) - int(already_loaded))\n                        else:\n                            loaded = int(stor_left)\n                            already_loaded = already_loaded + int(stor_left)\n\n                        time = loaded / Pnorm * 43200\n                        if self.meteo != []:\n                            for meteo in self.meteo:\n                                k = 1\n                                # if meteo.precipitation == 1:\n                                    # if train[0][1] == 26:\n                                        # k = 0\n\n                                if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                    k = 0.95\n\n                                if meteo.windV > 13.8 and meteo.windV <= 15:\n                                    k = 0.9\n\n                                if meteo.windV > 15 and meteo.windV <= 20:\n                                    k = 0.8\n\n                                if meteo.windV > 20:\n                                    k = 0\n\n                                if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                    dt = meteo.windEnd - meteo.windStart\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                    dt = (oper_time_start + time) - meteo.windStart\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                    dt = meteo.windEnd - oper_time_start\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                    new_time = time / k\n                                    time = new_time\n\n\n\n                        total_time += time\n                        time_start = oper_time_start + time\n                        amount = str(int(storage[4]) + int(loaded))\n                        storage_instance.setQuery(\"update expeditor_storage_link set cargo_amount = '\" + amount + \"' WHERE id = \" + str(storage[0]))\n                        self.time_lines.append([oper_time_start, time_start, 1, train[0][0], train[0][8], 3, storage_id, None, train[0][1], loaded, used_crans, workers, tech])\n\n                else:\n                    if already_loaded != train[0][2]:\n                        # Только уголь может быть таким подвозом\n                        if int(storage[3]) == 1:\n                            stor_left = self.getStorageCongestionLeft(storage[3], storage_id)\n                            oper_time_start = train[0][3]\n                            if time_start != train[0][3]:\n                                oper_time_start = time_start\n\n                            check_array = self.checkTime(oper_time_start)\n                            additional_ids = \"\"\n                            if check_array[2] != []:\n                                additional_ids = \" and num NOT IN (\"\n                                for cr in check_array[2]:\n                                    additional_ids += \"'\" + str(cr) + \"', \"\n\n                                additional_ids = additional_ids[:-2] + \")\"\n                            stor_crans = cran.getBy('object_id', '=', str(storage_id) + \" and type=1 \" + additional_ids)\n                            rw_crans = cran.getBy('object_id', '=', str(train[0][8]) + \" and type=3 \" + additional_ids)\n\n                            if stor_crans == [] or rw_crans == []:\n                                continue\n\n                            # if check_array[0] < 2 or check_array[1] < 2:\n                                # continue\n\n\n\n                            if min(len(rw_crans), len(stor_crans)) < 3:\n                                crans1 = stor_crans[0:min(len(rw_crans), len(stor_crans))]\n                                crans2 = rw_crans[0:min(len(rw_crans), len(stor_crans))]\n                            else:\n                                crans1 = stor_crans[0:3]\n                                crans2 = rw_crans[0:3]\n\n\n                            # рассчет производительности\n                            used_crans = []\n                            tmp_cr_list = []\n                            tmp_cr_list2 = []\n                            # Краны склада. Берем производительность крана с подвозом. Т.к. подвозить можно только уголь - берем в формулу только\n                            # performance_coal_2   в списке [0][4]\n                            for cr1 in crans1:\n                                c_t = CranType()\n                                c = c_t.find(cr1[2])\n                                used_crans.append(cr1[1])\n                                tmp_cr_list.append(int(c[0][4]))\n\n                            # Краны жд пути. Берем производительность при работе с ЖД составом. Т.к. подвозить можно только уголь - берем в формулу\n                            # только performance_coal_3   в списке [0][6]    \n                            for cr2 in crans2:\n                                c_t = CranType()\n                                c = c_t.find(cr2[2])\n                                used_crans.append(cr2[1])\n                                tmp_cr_list2.append(int(c[0][6]))\n\n                            Pnorm = min(sum(tmp_cr_list), sum(tmp_cr_list2))\n\n                            workers = (3 * len(crans1))\n                            tech = (3 * len(crans1))\n                            if check_array[0] < (3 * len(crans1)) or check_array[1] < (3 * len(crans1)):\n                                workers = check_array[0]\n                                tech = check_array[1]\n                                tmp_pnorm = Pnorm\n                                Pnorm = min((workers / (3 * len(crans1))), (tech / (3 * len(crans1)))) * tmp_pnorm\n\n                            # нужно 3 человека, 3 техники и 2 крана\n\n                            loaded = 0\n                            if stor_left >= (int(train[0][2]) - int(already_loaded)):\n                                loaded = (int(train[0][2]) - int(already_loaded))\n                                already_loaded = already_loaded + (int(train[0][2]) - int(already_loaded))\n                            else:\n                                loaded = int(stor_left)\n                                already_loaded = already_loaded + int(stor_left)\n\n                            time = loaded / Pnorm * 43200\n                            if self.meteo != []:\n                                for meteo in self.meteo:\n                                    k = 1\n                                    # if meteo.precipitation == 1:\n                                        # if train[0][1] == 26:\n                                            # k = 0\n\n                                    if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                        k = 0.95\n\n                                    if meteo.windV > 13.8 and meteo.windV <= 15:\n                                        k = 0.9\n\n                                    if meteo.windV > 15 and meteo.windV <= 20:\n                                        k = 0.8\n\n                                    if meteo.windV > 20:\n                                        k = 0\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                        dt = (oper_time_start + time) - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - oper_time_start\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                        new_time = time / k\n                                        time = new_time\n\n\n\n                            total_time += time\n                            time_start = oper_time_start + time\n                            amount = str(int(storage[4]) + int(loaded))\n                            storage_instance.setQuery(\"update expeditor_storage_link set cargo_amount = '\" + amount + \"' WHERE id = \" + str(storage[0]))\n                            self.time_lines.append([oper_time_start, time_start, 1, train[0][0], train[0][8], 3, storage_id, None, train[0][1], loaded, used_crans, workers, tech])\n                        else:\n                            continue\n\n        if already_loaded != train[0][2]:\n            storages = storage_instance.getAll()\n            # st_arr = []\n            # for sto in storages:\n                # storage_exps = storage_instance.getExpeditors(sto[0])\n                # st_arr.append(storage_exps)\n            # sorted = self.sortStoragesByCongestion(storages)\n\n            sorted = []\n            for st_id in prior_storages:\n                for s_t in storages:\n                    if s_t[0] == st_id:\n                        sorted.append(s_t)\n                        storages.remove(s_t)\n\n            sorted = sorted + storages\n\n            for storage in sorted:\n                storage_id = int(storage[0])\n                if self.getStorageCongestion(storage_id) > 98:\n                    continue\n\n\n                # Если есть приоритетные склады с этим же грузом этого же экспедитора\n                if storage_id in prior_storages:\n                    if already_loaded != train[0][2]:\n                        stor_left = self.getStorageCongestionLeft(train[0][1], storage_id)\n                        oper_time_start = train[0][3]\n                        if time_start != train[0][3]:\n                            oper_time_start = time_start\n\n                        check_array = self.checkTime(oper_time_start)\n\n                        if check_array[0] < 1 or check_array[1] < 1:\n                            continue\n\n\n                        additional_ids = \"\"\n                        if check_array[2] != []:\n                            additional_ids = \" and num NOT IN (\"\n                            for cr in check_array[2]:\n                                additional_ids += \"'\" + str(cr) + \"', \"\n\n                            additional_ids = additional_ids[:-2] + \")\"\n                        stor_crans = cran.getBy('object_id', '=', str(storage_id) + \" and type=1\" + additional_ids)\n\n                        if stor_crans == []:\n                            continue\n\n                        # Pnorm кранов\n                        Pnorm = 0\n                        workers_per_cran = 1\n                        if int(train[0][1]) == 26:\n                            workers_per_cran = 2\n                        tech_per_cran = 1\n\n                        if len(stor_crans) > 3:\n                            stor_crans = stor_crans[0:3]\n\n                        workers = workers_per_cran * len(stor_crans)\n                        tech = tech_per_cran * len(stor_crans)\n                        tmp_cr_list = []\n                        used_crans = []\n                        for cr1 in stor_crans:\n                            used_crans.append(cr1[1])\n                            c_t = CranType()\n                            c = c_t.find(cr1[2])\n                            if int(train[0][1]) == 1:\n                                tmp_cr_list.append(int(c[0][6]))\n                            else:\n                                tmp_cr_list.append(int(c[0][7]))\n\n                        Pnorm = sum(tmp_cr_list)\n                        if check_array[0] < workers or check_array[1] < tech:\n                            tmp_pnorm = Pnorm\n                            Pnorm = min((check_array[0] / workers), (check_array[1] / tech)) * tmp_pnorm\n                            workers = check_array[0]\n                            tech = check_array[1]\n\n\n                        # нужно 3 человека, 3 техники и 2 крана\n                        loaded = 0\n                        if stor_left >= (int(train[0][2]) - int(already_loaded)):\n                            loaded = (int(train[0][2]) - int(already_loaded))\n                            already_loaded = already_loaded + (int(train[0][2]) - int(already_loaded))\n                        else:\n                            loaded = int(stor_left)\n                            already_loaded = already_loaded + int(stor_left)\n\n                        time = loaded / Pnorm * 43200\n\n                        if self.meteo != []:\n                            for meteo in self.meteo:\n                                k = 1\n                                # if meteo.precipitation == 1:\n                                    # if train[0][1] == 26:\n                                        # k = 0\n\n                                if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                    k = 0.95\n\n                                if meteo.windV > 13.8 and meteo.windV <= 15:\n                                    k = 0.9\n\n                                if meteo.windV > 15 and meteo.windV <= 20:\n                                    k = 0.8\n\n                                if meteo.windV > 20:\n                                    k = 0\n\n                                if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                    dt = meteo.windEnd - meteo.windStart\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                    dt = (oper_time_start + time) - meteo.windStart\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                    dt = meteo.windEnd - oper_time_start\n                                    if k != 0:\n                                        new_time = time - dt + dt / k\n                                    else:\n                                        new_time = time + dt\n\n                                if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                    new_time = time / k\n                                    time = new_time\n\n\n                                # print(time, meteo.precipitation,meteo.windV,meteo.windStart,meteo.windEnd)\n                        # return False\n\n                        total_time += time\n                        time_start = oper_time_start + time\n                        new_exp = storage_instance.addExpeditor(str(storage_id), str(train[0][5]),str(train[0][1]),str(loaded))\n                        self.time_lines.append([oper_time_start, time_start, 1, train[0][0], train[0][8], 3, storage_id, None, train[0][1], loaded, used_crans, workers, tech])\n                else:\n                    if already_loaded != train[0][2]:\n                        # Только уголь может быть таким подвозом\n                        if int(train[0][1]) == 1:\n                            stor_left = self.getStorageCongestionLeft(train[0][1], storage_id)\n                            oper_time_start = train[0][3]\n                            if time_start != train[0][3]:\n                                oper_time_start = time_start\n\n                            check_array = self.checkTime(oper_time_start)\n                            additional_ids = \"\"\n                            if check_array[2] != []:\n                                additional_ids = \" and num NOT IN (\"\n                                for cr in check_array[2]:\n                                    additional_ids += \"'\" + str(cr) + \"', \"\n\n                                additional_ids = additional_ids[:-2] + \")\"\n                            stor_crans = cran.getBy('object_id', '=', str(storage_id) + \" and type=1\" + additional_ids)\n                            rw_crans = cran.getBy('object_id', '=', str(train[0][8]) + \" and type=3\" + additional_ids)\n\n                            if stor_crans == [] or rw_crans == []:\n                                continue\n\n                            # if check_array[0] < 2 or check_array[1] < 2:\n                                # continue\n\n\n\n                            if min(len(rw_crans), len(stor_crans)) < 3:\n                                crans1 = stor_crans[0:min(len(rw_crans), len(stor_crans))]\n                                crans2 = rw_crans[0:min(len(rw_crans), len(stor_crans))]\n                            else:\n                                crans1 = stor_crans[0:3]\n                                crans2 = rw_crans[0:3]\n\n\n                            # рассчет производительности\n                            used_crans = []\n                            tmp_cr_list = []\n                            tmp_cr_list2 = []\n                            # Краны склада. Берем производительность крана с подвозом. Т.к. подвозить можно только уголь - берем в формулу только\n                            # performance_coal_2   в списке [0][4]\n                            for cr1 in crans1:\n                                c_t = CranType()\n                                c = c_t.find(cr1[2])\n                                used_crans.append(cr1[1])\n                                tmp_cr_list.append(int(c[0][4]))\n\n                            # Краны жд пути. Берем производительность при работе с ЖД составом. Т.к. подвозить можно только уголь - берем в формулу\n                            # только performance_coal_3   в списке [0][6]    \n                            for cr2 in crans2:\n                                c_t = CranType()\n                                c = c_t.find(cr2[2])\n                                used_crans.append(cr2[1])\n                                tmp_cr_list2.append(int(c[0][6]))\n\n                            Pnorm = min(sum(tmp_cr_list), sum(tmp_cr_list2))\n\n                            workers = (3 * len(crans1))\n                            tech = (3 * len(crans1))\n                            if check_array[0] < (3 * len(crans1)) or check_array[1] < (3 * len(crans1)):\n                                workers = check_array[0]\n                                tech = check_array[1]\n                                tmp_pnorm = Pnorm\n                                Pnorm = min((workers / (3 * len(crans1))), (tech / (3 * len(crans1)))) * tmp_pnorm\n\n                            # нужно 3 человека, 3 техники и 2 крана\n\n                            loaded = 0\n                            if stor_left >= (int(train[0][2]) - int(already_loaded)):\n                                loaded = (int(train[0][2]) - int(already_loaded))\n                                already_loaded = already_loaded + (int(train[0][2]) - int(already_loaded))\n                            else:\n                                loaded = int(stor_left)\n                                already_loaded = already_loaded + int(stor_left)\n\n                            time = loaded / Pnorm * 43200\n\n                            if self.meteo != []:\n                                for meteo in self.meteo:\n                                    k = 1\n                                    # if meteo.precipitation == 1:\n                                        # if train[0][1] == 26:\n                                            # k = 0\n\n                                    if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                        k = 0.95\n\n                                    if meteo.windV > 13.8 and meteo.windV <= 15:\n                                        k = 0.9\n\n                                    if meteo.windV > 15 and meteo.windV <= 20:\n                                        k = 0.8\n\n                                    if meteo.windV > 20:\n                                        k = 0\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                        dt = (oper_time_start + time) - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - oper_time_start\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                        new_time = time / k\n                                        time = new_time\n\n                            total_time += time\n                            time_start = oper_time_start + time\n                            new_exp = storage_instance.addExpeditor(str(storage_id), str(train[0][5]),str(train[0][1]),str(loaded))\n                            self.time_lines.append([oper_time_start, time_start, 1, train[0][0], train[0][8], 3, storage_id, None, train[0][1], loaded, used_crans, workers, tech])\n                        else:\n                            continue\n\n        # s = Storage()\n        # for id in self.exp_stor_link_meta:\n            # s.deleteExpeditor(str(id))\n\n\n\n\n        if already_loaded != train[0][2]:\n            if oper_time_start == 0:\n                oper_time_start = train[0][3]\n            self.time_lines.append([oper_time_start, 0, 1, train[0][0], train[0][8], 0, 0, None, train[0][1], 0, [], 0, 0])\n        else:\n            self.calculated_trains.append(train[0][0])\n\n        if self.time_lines != []:\n            for row in self.time_lines:\n                if row[1] == 0 and row[5] == 0 and row[6] == 0:\n                    if row[2] == 1:\n                        print(row)\n                        return False\n                        tmp_total_loaded = 0\n                        for r in self.time_lines:\n                            if row[1] == 1 and row[2] == r[2]:\n                                tmp_total_loaded += r[9]\n                        t = train_inst.find(row[3])\n                        t[0] = list(t[0])\n                        t[0][8] = row[8]\n                        t[0][2] = int(t[0][2]) - tmp_total_loaded\n                        t[0] = tuple(t[0])\n                        self.calculateTrain(t)\n                        return False\n\n                # if row[1] == 0 and row[2] == 2:\n                    # print(train,row)\n                    # self.calculateShip(row)\n                    # return False\n\n        if from_ship_func == None:\n            self.getNextObject()\n\n    def checkTime(self, time = None):\n        workers = 0\n        tech = 0\n        used_crans = []\n        for arr in self.time_lines:\n            if time > arr[0] and time < arr[1]:\n                workers += arr[11]\n                tech += arr[12]\n                if arr[10] != []:\n                    for cr in arr[10]:\n                        used_crans.append(cr)\n\n        return [(self.workers_resource - workers), (self.tech_resource - tech), used_crans]\n\n\n    def setShipDoc(self, arrival_time = None, ship = None):\n        tmp_free_doc = 0\n        s = Ship()\n        ships = s.getByQuery(\"SELECT * FROM ships WHERE (doc != '' AND doc != 0)\")\n        used_dcs = []\n        sh_ids = []\n        all_docs = [2,3,4,5,6]\n        if ships != []:\n            for sh in ships:\n                sh_ids.append(sh[0])\n                used_dcs.append(sh[8])\n\n\n        if self.time_lines != []:\n            for arr in self.time_lines:\n                if arr[2] == 2:\n                    if arrival_time > arr[0] and arrival_time < arr[1]:\n                        if arr[4] not in used_dcs:\n                            used_dcs.append(arr[4])\n                            continue\n\n\n                    if arrival_time > arr[1] :\n                        if arr[3] in sh_ids:\n                            if arr[4] in used_dcs:\n                                used_dcs.remove(arr[4])\n\n                if arr[5] == 2:\n                    if arrival_time > arr[0] and arrival_time < arr[1]:\n                        if arr[7] not in used_dcs:\n                            used_dcs.append(arr[7])\n                            continue\n\n\n                    if arrival_time > arr[1] :\n                        if arr[6] in sh_ids:\n                            if arr[7] in used_dcs:\n                                used_dcs.remove(arr[7])\n\n        if used_dcs != []:\n            for doc__ in used_dcs:\n                if doc__ in all_docs:\n                    all_docs.remove(doc__)\n\n\n        if all_docs != []:\n            for doc in all_docs:\n                d = DocChar()\n                doc_char = d.getBy('num', '=', str(doc))\n\n                if doc_char[0][2] > ship[0][3] and doc_char[0][3] > ship[0][4]:\n                    tmp_free_doc = doc\n                    break\n\n\n\n        return tmp_free_doc\n\n\n    def calculateShip(self, ship_id, from_train_func = None, train_id = None):\n        global train\n        train_inst = Train()\n        ship_instance = Ship()\n        storage_instance = Storage()\n        cran = Cran()\n        already_loaded = 0\n        total_load = 0\n        total_time = 0\n        oper_time_start = 0\n        short_stor = 0\n        direct_stor = 0\n        ship = []\n        if ship_id != None:\n            if isinstance(ship_id, list):\n                ship = ship_instance.find(ship_id[3])\n                ship[0] = list(ship[0])\n                ship[0][5] = int(ship_id[0]) + 50\n                if train_id != None:\n                    tmp_tr = train_inst.find(train_id)\n                    ship[0][5] = int(tmp_tr[0][3]) + 50\n                ship[0][8] = int(ship_id[4])\n                ship[0] = tuple(ship[0])\n            else:\n                ship = ship_instance.find(ship_id)\n\n\n        time_start = int(ship[0][5])\n        ship_exps = []\n        if ship_id != None:\n            if isinstance(ship_id, list):\n                tmp_s_exps = ship_instance.getExpeditors(ship_id[3])\n                for r_s in tmp_s_exps:\n                    for tl in self.time_lines:\n                        if tl[5] == 2 and tl[6] == ship[0][0]:\n                            if r_s[3] == tl[8]:\n                                if r_s[4] != tl[9]:\n                                    val = r_s[4] - tl[9]\n                                    ship_exps.append((r_s[0],r_s[1],r_s[2],r_s[3],val))\n\n\n            else:\n                ship_exps = ship_instance.getExpeditors(ship_id)\n\n        if ship_exps != []:\n            for tmp_rw in ship_exps:\n                total_load += tmp_rw[4]\n\n        if str(ship[0][8]).lower() == 'null' or str(ship[0][8]).lower() == 'none' or ship[0][8] == '' or ship[0][8] == '0' or ship[0][8] == None:\n            ship[0] = list(ship[0])\n            ship[0][8] = self.setShipDoc(time_start, ship)\n            ship[0] = tuple(ship[0])\n\n        if ship[0][8] == 2:\n            short_stor = 1\n        if ship[0][8] == 4:\n            short_stor = 8\n        if ship[0][8] == 5:\n            short_stor = 8\n            direct_stor = 9\n        if ship[0][8] == 6:\n            short_stor = 10\n            direct_stor = 11\n\n\n        trains = []\n        train_expeditor = []\n        docs_for_direct_way = [2,3,5,6]\n\n        if ship[0][8] != None:\n            trains = []\n            trains = train_inst.getByQuery(\"SELECT * FROM trains WHERE ship_id = \" + str(ship[0][0]))\n            if trains == []:\n                trains_all = train_inst.getAllClean()\n                if trains_all != []:\n                    for tr in trains_all:\n                        if tr[0] in self.calculated_trains:\n                            continue\n\n                        for sh_ex in ship_exps:\n                            if int(ship[0][5]) < (int(tr[3]) + 86400) and int(ship[0][5]) > int(tr[3]) and sh_ex[2] == tr[5] and sh_ex[3] == tr[1]:\n\n\n                                train_expeditor.append(sh_ex)\n                                train = [tr]\n                                trains.append(tr)\n\n\n            if trains != []:\n                iter = -1\n\n                for train in trains:\n                    iter += 1\n                    tmp = []\n                    tmp = train\n                    train = []\n                    train.append(tmp)\n\n                    tr = train[0]\n                    if tr[8] == \"\" or tr[8] == \"0\" or tr[8] == \"None\" or str(tr[8]).lower() == \"null\" or tr[8] == None:\n                        train[0] = list(train[0])\n                        train[0][8] = self.setTrainRailway(train[0][3], ship)\n                        train[0] = tuple(train[0])\n\n                    # Отдельная операция погрузки с состава\n                    oper_time_start = int(ship[0][5])\n                    if time_start != int(ship[0][5]):\n                        oper_time_start = time_start\n\n                    check_array = self.checkTime(oper_time_start)\n\n                    if check_array[0] > 0 and check_array[1] > 0:\n\n\n                        additional_ids = \"\"\n                        if check_array[2] != []:\n                            additional_ids = \" and num NOT IN (\"\n                            for cr in check_array[2]:\n                                additional_ids += \"'\" + str(cr) + \"', \"\n\n                            additional_ids = additional_ids[:-2] + \")\"\n                        stor_crans = cran.getBy('object_id', '=', str(ship[0][8]) + \" and type=2\" + additional_ids)\n                        if stor_crans != []:\n\n\n                            # Pnorm кранов\n                            Pnorm = 0\n                            workers_per_cran = 2\n                            tech_per_cran = 1\n\n                            if len(stor_crans) > 3:\n                                stor_crans = stor_crans[0:3]\n\n                            workers = workers_per_cran * len(stor_crans)\n                            tech = tech_per_cran * len(stor_crans)\n                            tmp_cr_list = []\n                            used_crans = []\n                            for cr1 in stor_crans:\n                                used_crans.append(cr1[1])\n                                c_t = CranType()\n                                c = c_t.find(cr1[2])\n                                if int(train[0][1]) == 1:\n                                    tmp_cr_list.append(int(c[0][6]))\n                                else:\n                                    tmp_cr_list.append(int(c[0][7]))\n\n                            Pnorm = sum(tmp_cr_list)\n                            if check_array[0] < workers or check_array[1] < tech:\n                                tmp_pnorm = Pnorm\n                                Pnorm = min((check_array[0] / workers), (check_array[1] / tech)) * tmp_pnorm\n                                workers = check_array[0]\n                                tech = check_array[1]\n\n\n\n                            loaded = 0\n                            if train_expeditor[iter][4] > train[0][2]:\n                                loaded = (int(train[0][2]))\n                                already_loaded = already_loaded + int(train[0][2])\n                            else:\n                                loaded = int(train_expeditor[iter][4])\n                                already_loaded = already_loaded + int(train_expeditor[iter][4])\n\n                            # train_expeditor[iter] = list(train_expeditor[iter])\n                            # train_expeditor[iter][4] = train_expeditor[iter][4] - loaded\n                            # train_expeditor[iter] = tuple(train_expeditor[iter])\n\n                            time = loaded / Pnorm * 43200\n                            if self.meteo != []:\n                                for meteo in self.meteo:\n                                    k = 1\n                                    # if meteo.precipitation == 1:\n                                        # if train[0][1] == 26:\n                                            # k = 0\n\n                                    if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                        k = 0.95\n\n                                    if meteo.windV > 13.8 and meteo.windV <= 15:\n                                        k = 0.9\n\n                                    if meteo.windV > 15 and meteo.windV <= 20:\n                                        k = 0.8\n\n                                    if meteo.windV > 20:\n                                        k = 0\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                        dt = (oper_time_start + time) - meteo.windStart\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                        dt = meteo.windEnd - oper_time_start\n                                        if k != 0:\n                                            new_time = time - dt + dt / k\n                                        else:\n                                            new_time = time + dt\n\n                                    if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                        new_time = time / k\n                                        time = new_time\n\n\n\n\n                            tmp_e = []\n                            for e in ship_exps:\n                                if e[2] == train_expeditor[iter][2]:\n                                    tmp_e = e\n                                    tmp_e = list(e)\n                                    tmp_e[4] = e[4] - loaded\n                                    tmp_e = tuple(tmp_e)\n                                    ship_exps.remove(e)\n\n                            if tmp_e != []:\n                                if tmp_e[4] > 0:\n                                    ship_exps.append(tmp_e)\n\n\n\n\n\n                            total_time += time\n                            time_start = oper_time_start + time\n                            self.time_lines.append([oper_time_start, time_start, 1, train[0][0], train[0][8], 2, ship[0][0], ship[0][8], train[0][1], loaded, used_crans, workers, tech])\n\n                            changed_start_time = 0\n                            if loaded != train[0][2]:\n                                train[0] = list(train[0])\n                                train[0][2] = train[0][2] - loaded\n                                train[0][3] = time_start\n                                train[0] = tuple(train[0])\n                                self.calculateTrain(train, 1)\n                                changed_start_time = self.time_lines[-1][1]\n                            else:\n                                self.calculated_trains.append(train[0][0])\n\n                            if changed_start_time != 0:\n                                time_start = changed_start_time\n\n\n        # Продолжение операции, если на судне еще есть место\n        if already_loaded != total_load:\n\n            all_exps = []\n            for e in ship_exps:\n                stor_exps = storage_instance.getByExpCargo(str(e[2]),str(e[3]))\n                if stor_exps != []:\n                    for stor_exp in stor_exps:\n                        all_exps.append(stor_exp)\n\n            tmp_stor_exp = []\n\n            if direct_stor != 0:\n                if all_exps != []:\n                    for all_row in all_exps:\n                        if all_row[2] == direct_stor:\n                            tmp_stor_exp.append(all_row)\n                            all_exps.remove(all_row)\n\n            if short_stor != 0:\n                if all_exps != []:\n                    for all_row in all_exps:\n                        if all_row[2] == short_stor:\n                            tmp_stor_exp.append(all_row)\n                            all_exps.remove(all_row)\n\n            all_exps = tmp_stor_exp + all_exps\n\n\n\n            if all_exps != []:\n                for exp in all_exps:\n                    if ship_exps != []:\n                        current_exp = ()\n                        for sh_e in ship_exps:\n                            if sh_e[2] == exp[1]:\n                                current_exp = sh_e\n                        oper_time_start = int(ship[0][5])\n                        if time_start != int(ship[0][5]):\n                            oper_time_start = time_start\n\n                        check_array = self.checkTime(oper_time_start)\n\n                        if check_array[0] > 0 and check_array[1] > 0:\n                            tech_lines_left = 3\n                            additional_ids = \"\"\n                            if check_array[2] != []:\n                                additional_ids = \" and num NOT IN (\"\n                                for cr in check_array[2]:\n                                    additional_ids += \"'\" + str(cr) + \"', \"\n\n                                additional_ids = additional_ids[:-2] + \")\"\n\n\n                            ship_crans = cran.getBy('object_id', '=', str(ship[0][8]) + \" and type=2\" + additional_ids)\n                            if ship_crans != []:\n                                if exp[2] == short_stor:\n                                    Pnorm = 0\n                                    workers_per_cran = 3\n                                    tech_per_cran = 2\n\n                                    if len(ship_crans) > 3:\n                                        ship_crans = ship_crans[0:3]\n\n                                    workers = workers_per_cran * len(ship_crans)\n                                    tech = tech_per_cran * len(ship_crans)\n                                    tmp_cr_list = []\n                                    used_crans = []\n                                    for cr1 in ship_crans:\n                                        used_crans.append(cr1[1])\n                                        c_t = CranType()\n                                        c = c_t.find(cr1[2])\n                                        if int(train[0][1]) == 1:\n                                            tmp_cr_list.append(int(c[0][4]))\n                                        else:\n                                            tmp_cr_list.append(int(c[0][5]))\n\n\n                                    Pnorm = sum(tmp_cr_list)\n                                elif exp[2] == direct_stor:\n                                    Pnorm = 0\n                                    workers_per_cran = 3\n                                    tech_per_cran = 2\n\n                                    if len(ship_crans) > 3:\n                                        ship_crans = ship_crans[0:3]\n\n                                    workers = workers_per_cran * len(ship_crans)\n                                    tech = tech_per_cran * len(ship_crans)\n                                    tmp_cr_list = []\n                                    used_crans = []\n                                    for cr1 in ship_crans:\n                                        used_crans.append(cr1[1])\n                                        c_t = CranType()\n                                        c = c_t.find(cr1[2])\n                                        if int(train[0][1]) == 1:\n                                            tmp_cr_list.append(int(c[0][2]))\n                                        else:\n                                            tmp_cr_list.append(int(c[0][3]))\n\n\n                                    Pnorm = sum(tmp_cr_list)\n                                else:\n\n                                    Pnorm = 0\n                                    workers_per_cran = 4\n                                    tech_per_cran = 3\n                                    if exp[3] == 27:\n                                        workers_per_cran = 5\n                                        tech_per_cran = 2\n                                    sec_crans = cran.getBy('object_id', '=', str(exp[2]) + \" and type=1\" + additional_ids)\n                                    if min(len(sec_crans), len(ship_crans)) < 3:\n                                        crans1 = ship_crans[0:min(len(sec_crans), len(ship_crans))]\n                                        crans2 = sec_crans[0:min(len(sec_crans), len(ship_crans))]\n                                    else:\n                                        crans1 = ship_crans[0:3]\n                                        crans2 = sec_crans[0:3]\n\n                                    workers = workers_per_cran * len(ship_crans)\n                                    tech = tech_per_cran * len(ship_crans)\n                                    # рассчет производительности\n                                    used_crans = []\n                                    tmp_cr_list = []\n                                    tmp_cr_list2 = []\n                                    # Краны склада. Берем производительность крана с подвозом. Т.к. подвозить можно только уголь - берем в формулу только\n                                    # performance_coal_2   в списке [0][4]\n                                    for cr1 in crans1:\n                                        c_t = CranType()\n                                        c = c_t.find(cr1[2])\n                                        used_crans.append(cr1[1])\n                                        tmp_cr_list.append(int(c[0][4]))\n\n                                    # Краны жд пути. Берем производительность при работе с ЖД составом. Т.к. подвозить можно только уголь - берем в формулу\n                                    # только performance_coal_3   в списке [0][6]    \n                                    for cr2 in crans2:\n                                        c_t = CranType()\n                                        c = c_t.find(cr2[2])\n                                        used_crans.append(cr2[1])\n                                        tmp_cr_list2.append(int(c[0][6]))\n\n                                    Pnorm = min(sum(tmp_cr_list), sum(tmp_cr_list2))\n\n\n\n\n                                if check_array[0] < workers or check_array[1] < tech:\n                                    tmp_pnorm = Pnorm\n                                    Pnorm = min((check_array[0] / workers), (check_array[1] / tech)) * tmp_pnorm\n                                    workers = check_array[0]\n                                    tech = check_array[1]\n\n\n\n                                loaded = 0\n                                if exp[4] >= current_exp[4]:\n                                    loaded = current_exp[4]\n                                    already_loaded = already_loaded + int(loaded)\n                                else:\n                                    loaded = exp[4]\n                                    already_loaded = already_loaded + int(loaded)\n\n                                time = loaded / Pnorm * 43200\n                                if self.meteo != []:\n                                    for meteo in self.meteo:\n                                        k = 1\n                                        # if meteo.precipitation == 1:\n                                            # if train[0][1] == 26:\n                                                # k = 0\n\n                                        if meteo.windV > 10.7 and meteo.windV <= 13.8:\n                                            k = 0.95\n\n                                        if meteo.windV > 13.8 and meteo.windV <= 15:\n                                            k = 0.9\n\n                                        if meteo.windV > 15 and meteo.windV <= 20:\n                                            k = 0.8\n\n                                        if meteo.windV > 20:\n                                            k = 0\n\n                                        if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                            dt = meteo.windEnd - meteo.windStart\n                                            if k != 0:\n                                                new_time = time - dt + dt / k\n                                            else:\n                                                new_time = time + dt\n\n                                        if int(meteo.windStart) > oper_time_start and int(meteo.windEnd) >= (oper_time_start + time):\n\n                                            dt = (oper_time_start + time) - meteo.windStart\n                                            if k != 0:\n                                                new_time = time - dt + dt / k\n                                            else:\n                                                new_time = time + dt\n\n                                        if int(meteo.windStart) <= oper_time_start and int(meteo.windEnd) < (oper_time_start + time):\n\n                                            dt = meteo.windEnd - oper_time_start\n                                            if k != 0:\n                                                new_time = time - dt + dt / k\n                                            else:\n                                                new_time = time + dt\n\n                                        if int(meteo.windStart) < oper_time_start and int(meteo.windEnd) > (oper_time_start + time):\n                                            new_time = time / k\n                                            time = new_time\n\n\n\n                                tmp_e = []\n                                for e in ship_exps:\n                                    if e[2] == exp[1]:\n                                        tmp_e = e\n                                        tmp_e = list(e)\n                                        tmp_e[4] = e[4] - loaded\n                                        tmp_e = tuple(tmp_e)\n                                        ship_exps.remove(e)\n                                if tmp_e != []:\n                                    if tmp_e[4] > 0:\n                                        ship_exps.append(tmp_e)\n\n                                if (int(exp[4]) - loaded) < 1:\n                                    storage_instance.setQuery(\"delete from expeditor_storage_link where id = \" + str(exp[0]))\n                                else:\n                                    storage_instance.setQuery(\"UPDATE expeditor_storage_link set cargo_amount = '\" + str(int(exp[4]) - loaded) + \"' where id = \" + str(exp[0]))\n\n                                total_time += time\n                                time_start = oper_time_start + time\n                                self.time_lines.append([oper_time_start, time_start, 3, exp[2], None, 2, ship[0][0], ship[0][8], exp[3], loaded, used_crans, workers, tech])\n\n\n\n                            # cran_nums = \"(\"\n                            # for sh_cr in ship_crans:\n                                # cran_nums += str(sh_cr[1]) + \", \"\n                            # cran_nums = cran_nums[:-2] + \")\"\n                            # direct_crans = []    \n                            # if exp[2] == prior_storage:\n                                # direct_crans = cran.getBy('object_id', '=', str(prior_storage) + \" and type=1 and num IN \" + cran_nums)\n                                # tech_lines_left = tech_lines_left - len(direct_crans)\n\n                            # if direct_crans != []:\n\n\n\n\n                                # нужно 3 человека, 3 техники и 2 крана\n\n\n\n            else:\n                if isinstance(ship_id, list):\n                    self.getNextObject()\n                    return False\n\n                oper_time_start = int(ship[0][5])\n                if time_start != int(ship[0][5]):\n                    oper_time_start = time_start\n\n                self.time_lines.append([oper_time_start, 0, 2, ship[0][0], ship[0][8], 0, 0, 0, 0, 0, 0, 0, 0])\n        else:\n            t = 0\n\n        # print(self.time_lines)\n        # if already_loaded == total_load:\n        self.calculated_ships.append(ship[0][0])\n        if from_train_func == None:\n            self.getNextObject()\n\n    def start(self):\n        meta = Meta()\n        meta.prepare()\n\n        self.getNextObject()\n\n        meta.returnValues()\n        return self.time_lines\n\n    def getStorageCongestionLeft(self,cargo, storage_id):\n        perc_left = 100 - self.getStorageCongestion(storage_id)\n        sdv = StorageDefVal()\n        storage_params = sdv.getBy('storage', '=' , str(storage_id))\n        capW = 0\n        for p in storage_params:\n            if int(cargo) == int(p[2]):\n                capW = p[4]\n\n        val = capW * perc_left / 100\n\n        return val\n\n    def getStorageCongestion(self, storage_id):\n        total_perc = 0\n        storage = Storage()\n        exps = storage.getExpeditors(storage_id)\n        st_d_v = StorageDefVal()\n        default_values = st_d_v.getBy('storage', '=' , str(storage_id))\n        if default_values != []:\n            for r in exps:\n                capW = 0\n                for p in default_values:\n                    if int(r[3]) == int(p[2]):\n                        capW = p[4]\n\n                v = str(capW)\n                capW = float(v.replace(',', '.'))\n                v = str(r[4])\n                cap = float(v.replace(',', '.'))\n                total_perc = total_perc + (cap * 100 / capW )\n\n        return total_perc\n\nclass Meta():\n    def __init__(self):\n        self.data = None\n\n    def prepare(self):\n        c = db_connection.cursor()\n        c.execute(\"select * from expeditor_storage_link\")\n        res = c.fetchall()\n        c.execute(\"DELETE FROM meta_exp_stor\")\n        if res != []:\n            for row in res:\n                c.execute(\"insert into meta_exp_stor (id,expeditor_id, storage_id, cargo, cargo_amount) VALUES('\" + str(row[0]) + \"','\" + str(row[1]) + \"','\" + str(row[2]) + \"','\" + str(row[3]) + \"','\" + str(row[4]) + \"')\")\n        db_connection.commit()\n\n    def returnValues(self):\n        c = db_connection.cursor()\n        c.execute(\"select * from meta_exp_stor\")\n        res = c.fetchall()\n        c.execute(\"DELETE FROM expeditor_storage_link\")\n        if res != []:\n            for row in res:\n                c.execute(\"insert into expeditor_storage_link (id,expeditor_id, storage_id, cargo, cargo_amount) VALUES('\" + str(row[0]) + \"','\" + str(row[1]) + \"','\" + str(row[2]) + \"','\" + str(row[3]) + \"','\" + str(row[4]) + \"')\")\n        db_connection.commit()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ContentManagement.py b/ContentManagement.py
--- a/ContentManagement.py	(revision ca3e486479ccfdd5436ee9c86867e17e4cdb6a14)
+++ b/ContentManagement.py	(date 1654213610000)
@@ -554,6 +554,7 @@
 
 
 class Cran():
+
     def __init__(self, id=None, num=None, cran_type=None, type=None, object_id=None):
         # type 1 - склад 2 - причал 3 - Ж/Д
         self.id = id
